{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent, Typography, Dialog } from \"@material-ui/core\";\nimport { commonStyles, desktopStyles, mobileStyles } from \"./styles\";\nimport Link from \"next/link\";\nimport ConnectyCube from \"connectycube\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport store from \"../../redux/store\";\nimport PageLoader from \"../PageLoader\";\nimport { fetchDialogs } from \"../../apis/chat-api\";\nimport DialogBox from \"./DialogBox\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\"; // import dialogs from \"../../redux/reducers/dialogs\";\n\nimport { selectedDialog } from \"../../redux/actions/selectedDialog\";\nimport ChatBox from \"./ChatBox\";\nimport { pushMessage } from \"../../redux/actions/messages\";\nvar useStyles = makeStyles(function (theme) {\n  var _objectSpread2;\n\n  return _objectSpread(_objectSpread({}, commonStyles), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, theme.breakpoints.up(\"sm\"), desktopStyles), _defineProperty(_objectSpread2, theme.breakpoints.down(\"sm\"), mobileStyles), _objectSpread2));\n});\n\nvar Chat = function Chat(_ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \"\" : _ref$type,\n      _ref$id = _ref.id,\n      id = _ref$id === void 0 ? \"\" : _ref$id;\n  var selectedDialogVal = useSelector(function (state) {\n    return state.selectedDialog;\n  });\n  var chatConnected = useSelector(function (state) {\n    return state.chatConnected;\n  }); // const user = useSelector((state) => state.auth_user.user);\n\n  var _useState = useState([]),\n      dialogsArr = _useState[0],\n      setDialogs = _useState[1];\n\n  var _useState2 = useState([]),\n      data = _useState2[0],\n      setdata = _useState2[1];\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loader = _React$useState4[0],\n      setloader = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dialogLoader = _React$useState6[0],\n      setdialogLoader = _React$useState6[1];\n\n  var user = useSelector(function (state) {\n    return state.auth_user.user;\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (!dialogsArr.length && chatConnected) {\n      // setUpListeners()\n      setloader(true);\n      getDialogs(type, id);\n    }\n  }, [type, id, user, chatConnected]); // const setUpListeners = () => {\n  //   ConnectyCube.chat.onMessageListener = onMessage;\n  // }\n\n  function onMessage(userId, message) {\n    if (!user || !user.connectycube_user || userId == user.connectycube_user.connectycube_id) {\n      return;\n    }\n\n    console.log(message);\n    message.message = message.body;\n    message.device_token = user.device_token;\n    message.notif = true;\n    dispatch(pushMessage(message));\n  }\n\n  var getDialogs = function getDialogs(type, id) {\n    var count = 1;\n\n    if (data && data.current_page >= data.last_page) {\n      return;\n    }\n\n    if (data && data.current_page) {\n      count = data.current_page + 1;\n    }\n\n    var q = \"?page=\".concat(count);\n\n    if (type, id) {\n      q += \"&type=\".concat(type, \"&id=\").concat(id);\n    }\n\n    fetchDialogs(user.id, q).then(function (resp) {\n      var data = resp.body;\n\n      if (resp.error) {\n        alert(\"Oops!! there was some problem while connecting\");\n        return;\n      }\n\n      var dialogs = dialogsArr.concat(data.data);\n      setDialogs(dialogs);\n      setdata(data);\n      setloader(false);\n      setdialogLoader(false); // if (!chatAuthenticated && dialogs.length) {\n      //   selectDialog(dialogs[0], dialogs);\n      // }\n    });\n  };\n\n  var gotoChat = function gotoChat() {\n    setOpen(false);\n  };\n\n  var goBack = function goBack() {\n    setOpen(true);\n    dispatch(selectedDialog({}));\n    dispatch(pushMessage([]));\n  };\n\n  var handleDialogsSCroll = function handleDialogsSCroll(e) {\n    if (!dialogsArr.length || data.current_page == data.last_page) {\n      return;\n    }\n\n    var target = e.target;\n\n    if (target.scrollHeight - target.scrollTop === target.clientHeight) {\n      setdialogLoader(true);\n      getDialogs();\n    }\n  };\n\n  var selectDialog = function selectDialog(dialog, dialogs) {\n    setOpen(false);\n    clearUnread(dialog.id, dialogs);\n    dispatch(selectedDialog(dialog));\n  };\n\n  var updateDialogSeenBySeller = function updateDialogSeenBySeller(dialog, dialogs) {\n    dialogs = dialogsArr.map(function (item) {\n      if (item.id == dialog.id) {\n        item.opened_by_seller = true;\n      }\n\n      return item;\n    });\n    console.log(\"dialogsupdate\", dialogs);\n    setDialogs(dialogs);\n  };\n\n  var deleteDialogSeenBySeller = function deleteDialogSeenBySeller(dialog, dialogs) {\n    dialogs = dialogsArr.filter(function (item) {\n      return item.id != dialog.id;\n    });\n    setDialogs(dialogs);\n    dispatch(selectedDialog({}));\n  };\n\n  var clearUnread = function clearUnread(id) {\n    var dialogsArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var dialogs = dialogsArr.map(function (item) {\n      if (item.id == id) {\n        item.unread_messages_count = 0;\n      }\n\n      return item;\n    });\n    setDialogs(dialogs);\n  };\n\n  var classes = useStyles(); // if (!loader && !dialogsArr.length) {\n  //   return (\n  //     <div className={classes.wrapper}>\n  //       <div className=\"container\">\n  //         <div className=\"emptyDialog\">\n  //           <img src=\"/static/images/undraw_typing.svg\" />\n  //           <Typography >\n  //             Your message box is empty\n  //           </Typography>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   )\n  // }\n\n  return __jsx(\"div\", {\n    className: classes.wrapper\n  }, __jsx(PageLoader, {\n    loading: loader\n  }), __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    className: open == true ? \"left\" : \"active left\"\n  }, __jsx(\"div\", {\n    className: \"top\"\n  }, __jsx(Typography, {\n    variant: \"h4\"\n  }, \"Messages \")), __jsx(\"ul\", {\n    className: \"people\",\n    onScroll: handleDialogsSCroll\n  }, dialogsArr.length > 0 && dialogsArr.map(function (dialog) {\n    return __jsx(DialogBox, {\n      dialog: dialog,\n      key: dialog.id,\n      auth: user,\n      selectDialog: selectDialog,\n      dialogs: dialogsArr,\n      unread_messages_count: dialog.unread_messages_count ? dialog.unread_messages_count : \"\"\n    });\n  }), dialogLoader && __jsx(\"div\", {\n    className: \"dialog-loader\"\n  }, __jsx(CircularProgress, {\n    color: \"primary\",\n    size: 20\n  })))), user && __jsx(ChatBox, {\n    dialogs: dialogsArr,\n    selectedDialogVal: selectedDialogVal ? selectedDialogVal : {},\n    auth: user,\n    goBack: goBack,\n    dialogsArr: dialogsArr,\n    updateDialogSeenBySeller: updateDialogSeenBySeller,\n    deleteDialogSeenBySeller: deleteDialogSeenBySeller\n  })));\n};\n\nexport default Chat;","map":null,"metadata":{},"sourceType":"module"}