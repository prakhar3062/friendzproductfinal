{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Button, Container, Grid, Card, CardContent, Typography } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PhoneIphoneIcon from \"@material-ui/icons/PhoneIphone\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport AttachmentOutlinedIcon from \"@material-ui/icons/AttachmentOutlined\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport { commonStyles, desktopStyles, mobileStyles, TabStyles } from \"./styles\";\nimport Link from \"next/link\";\nimport PageLoader from \"../PageLoader\";\nimport { ResetPasswordAPI } from \"../../apis/auth-api\";\nconst useStyles = makeStyles(theme => _objectSpread(_objectSpread({}, commonStyles), {}, {\n  [theme.breakpoints.up(\"sm\")]: desktopStyles,\n  [theme.breakpoints.between(\"xs\", \"sm\")]: TabStyles,\n  [theme.breakpoints.down(\"xs\")]: mobileStyles\n}));\nimport { useDispatch } from \"react-redux\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { authenticated } from \"../../redux/actions/auth\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport ImageCropper from \"../ImageCropper\";\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nconst ResetPassword = ({\n  user\n}) => {\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: searchloading,\n    1: setsearchloading\n  } = useState(false);\n  const {\n    0: error,\n    1: seterror\n  } = useState([]);\n  const {\n    0: password,\n    1: setpassword\n  } = useState('');\n  const {\n    0: oldpassword,\n    1: setoldpassword\n  } = useState('');\n  const {\n    0: confirmpassword,\n    1: setconfirmpassword\n  } = useState('');\n  const {\n    0: snackbar,\n    1: setsnackbar\n  } = useState(false);\n  const {\n    0: snackbarMsg,\n    1: setsnackbarMsg\n  } = useState(\"\");\n  const {\n    0: snackbarType,\n    1: setsnackbarType\n  } = useState(\"success\");\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const updatePassword = () => {\n    let is_valid = checkValidation();\n\n    if (!is_valid) {\n      return;\n    }\n\n    let data = {\n      password: password,\n      confirmpassword: confirmpassword,\n      oldpassword: oldpassword,\n      user_id: user.id\n    };\n    setloading(true);\n    ResetPasswordAPI(data, user.id).then(data => {\n      setloading(false);\n\n      if (data && data.error) {\n        seterror(data.msg);\n      } else {\n        setsnackbar(true);\n        setsnackbarMsg(\"Password updated successfully.\");\n        setsnackbarType(\"success\");\n        setpassword('');\n        setoldpassword('');\n        setconfirmpassword('');\n      }\n    });\n  };\n\n  const checkValidation = () => {\n    seterror(\"\");\n\n    if (!password || !oldpassword || !confirmpassword) {\n      seterror([\"All fields are required\"]);\n      return false;\n    }\n\n    if (password.length < 6) {\n      seterror([\"Password must be 6 chracters long\"]);\n      return false;\n    }\n\n    ;\n\n    if (password != confirmpassword) {\n      seterror([\"Confirm password not matched\"]);\n      return false;\n    }\n\n    ;\n    return true;\n  };\n\n  const updateformData = (e, type) => {\n    e.preventDefault();\n    eval(\"set\" + type + \"('\" + e.target.value + \"')\");\n  };\n\n  const handlesnackbar = () => {\n    setsnackbar(!snackbar);\n  };\n\n  return __jsx(\"section\", {\n    className: classes.section\n  }, __jsx(Container, {\n    maxWidth: \"xl\"\n  }, __jsx(PageLoader, {\n    loading: loading\n  }), __jsx(Snackbar, {\n    open: snackbar,\n    autoHideDuration: 6000,\n    onClose: handlesnackbar\n  }, __jsx(Alert, {\n    onClose: handlesnackbar,\n    severity: snackbarType\n  }, snackbarMsg)), __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    lg: 12,\n    md: 12,\n    sm: 12,\n    xs: 12\n  }, __jsx(Typography, {\n    className: classes.editTitle,\n    variant: \"h3\"\n  }, \"Reset Password\")), __jsx(Grid, {\n    item: true,\n    lg: 9,\n    md: 9,\n    sm: 8,\n    xs: 12\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    autoComplete: \"off\"\n  }, __jsx(\"div\", {\n    className: `${classes.formInput} ${classes.formInputFullWidth}`\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PersonIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"fname\",\n    label: \"Old Password\",\n    value: oldpassword,\n    type: \"password\",\n    onChange: e => updateformData(e, \"oldpassword\")\n  })))), __jsx(\"div\", {\n    className: `${classes.formInput} ${classes.formInputFullWidth}`\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PersonIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"fname\",\n    label: \"New Password\",\n    value: password,\n    type: \"password\",\n    onChange: e => updateformData(e, \"password\")\n  })))), __jsx(\"div\", {\n    className: `${classes.formInput} ${classes.formInputFullWidth}`\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PersonIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"fname\",\n    label: \"ConfirmPassword\",\n    value: confirmpassword,\n    type: \"password\",\n    onChange: e => updateformData(e, \"confirmpassword\")\n  })))), __jsx(Button, {\n    variant: \"contained\",\n    className: classes.Button,\n    onClick: updatePassword\n  }, \"Update\")), __jsx(\"div\", null, error.length > 0 && error.map((text, index) => __jsx(Typography, {\n    color: \"error\",\n    key: `err-${index}`\n  }, text)))))))));\n};\n\nexport default ResetPassword;","map":null,"metadata":{},"sourceType":"module"}