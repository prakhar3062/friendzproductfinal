{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport AuthService from \"../services/authService\";\nimport { useSelector, useDispatch } from \"react-redux\"; // import ChatService from \"../../redux/services/chat-service\";\n\nimport Link from \"next/link\";\nimport { unreadMsg } from \"../../apis/chat-api\";\nimport ConnectyCube from 'connectycube';\nimport appConfig from '../../../appConfig';\nimport { chatUnauthenticated } from \"../../redux/actions/chatUser\";\nimport { chatReset } from \"../../redux/actions/chatConnected\";\nimport chatService from \"../../redux/services/chat-service\";\nimport { unSelectedDialog } from \"../../redux/actions/selectedDialog\";\nimport Router from 'next/router';\n\nvar ChatMessageIcon = function ChatMessageIcon() {\n  var authUser = useSelector(function (state) {\n    return state.auth_user.user;\n  });\n  var accessToken = useSelector(function (state) {\n    return state.auth_user.accessToken;\n  });\n  var chatUnreadCount = useSelector(function (state) {\n    return state.chatUnreadCount;\n  });\n\n  var _useState = useState(),\n      count = _useState[0],\n      setcount = _useState[1];\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (authUser && authUser.connectycube_user) {\n      dispatch(chatUnauthenticated());\n      dispatch(chatReset());\n      dispatch(unSelectedDialog());\n      var init = AuthService.init();\n\n      if (init && authUser.connectycube_user) {\n        console.log();\n        AuthService.login({\n          email: authUser.email,\n          password: authUser.connectycube_user.password\n        }).then(function (user) {})[\"catch\"](function (error) {\n          console.log(error);\n        });\n      } // unreadMsg(authUser.id).then((data) => {\n      //     data && setcount(data);\n      // });\n\n    }\n  }, []);\n\n  var connectChat = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var CREDENTIALS, CONFIG, init;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              CREDENTIALS = {\n                email: authUser.email,\n                password: authUser.connectycube_user.password\n              };\n              CONFIG = {\n                on: {\n                  sessionExpired: function sessionExpired(handleResponse, retry) {\n                    // call handleResponse() if you do not want to process a session expiration,\n                    // so an error will be returned to origin request\n                    // handleResponse();\n                    // JS SDK v2\n                    ConnectyCube.createSession().then(retry)[\"catch\"](function (error) {});\n                  }\n                }\n              };\n              _context.next = 4;\n              return ConnectyCube.init.apply(ConnectyCube, _toConsumableArray(appConfig.connectyCubeConfig).concat([CONFIG]));\n\n            case 4:\n              init = _context.sent;\n              console.log(init);\n\n              if (init) {\n                ConnectyCube.login(CREDENTIALS).then(function (session) {\n                  console.log('session', session);\n                })[\"catch\"](function (error) {});\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function connectChat() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var setUpListeners = function setUpListeners() {\n    ConnectyCube.chat.onMessageListener = onMessage;\n    var opponentId = 2066645;\n    var message = {\n      type: 'groupchat',\n      body: \"How are you today?\",\n      extension: {\n        save_to_history: 1,\n        dialog_id: '5f6f3676ca8bf42a744c3f4b'\n      },\n      markable: 1\n    };\n    message = ConnectyCube.chat.send(opponentId, message);\n    console.log('message', message);\n  };\n\n  function onMessage(userId, message) {\n    console.log('[ConnectyCube.chat.onMessageListener] callback:', userId, message);\n  }\n\n  var handleChatClick = function handleChatClick() {\n    if (!accessToken) {\n      window.location.replace('/?signup=open');\n    } else {\n      Router.push('/chat');\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(IconButton, {\n    color: \"inherit\",\n    onClick: handleChatClick\n  }, __jsx(Badge, {\n    badgeContent: chatUnreadCount,\n    color: \"secondary\"\n  }, __jsx(ChatIcon, null))));\n};\n\nexport default ChatMessageIcon;","map":null,"metadata":{},"sourceType":"module"}