{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, Card, CardContent, Typography } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { commonStyles, desktopStyles, mobileStyles, TabStyles } from './styles';\nimport styled from \"styled-components\";\nimport { searchUniversities } from \"../../apis/global-api\";\nimport logo from './../../public/static/images/logo.png';\nimport { useRouter } from \"next/router\";\nconst StyledDialog = styled(Dialog)`\n  .MuiBackdrop-root {\n    background-color: rgba(0, 0, 0, 0.7);\n  }\n`;\nconst useStyles = makeStyles(theme => _objectSpread(_objectSpread({}, commonStyles), {}, {\n  [theme.breakpoints.up('sm')]: desktopStyles,\n  [theme.breakpoints.between('xs', 'sm')]: TabStyles,\n  [theme.breakpoints.down('xs')]: mobileStyles\n}));\n\nconst Modal = ({\n  openStatus\n}) => {\n  useEffect(() => {\n    console.log('openStatus', openStatus);\n    setopen(openStatus);\n  }, [openStatus]);\n  const {\n    0: open,\n    1: setopen\n  } = useState(openStatus);\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: universities,\n    1: setuniversities\n  } = useState([{\n    name: \"\",\n    id: \"\"\n  }]);\n  const {\n    0: university,\n    1: setuniversity\n  } = useState({\n    name: \"\",\n    id: \"\"\n  });\n\n  const openModal = () => {\n    setopen(true);\n  };\n\n  const closeModal = () => {\n    setopen(false);\n  };\n\n  const router = useRouter();\n  const top100Films = [{\n    title: 'The Shawshank Redemption',\n    year: 1994\n  }, {\n    title: 'The Godfather',\n    year: 1972\n  }, {\n    title: 'The Godfather: Part II',\n    year: 1974\n  }, {\n    title: 'The Dark Knight',\n    year: 2008\n  }, {\n    title: '12 Angry Men',\n    year: 1957\n  }, {\n    title: \"Schindler's List\",\n    year: 1993\n  }, {\n    title: 'Pulp Fiction',\n    year: 1994\n  }, {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003\n  }, {\n    title: 'The Good, the Bad and the Ugly',\n    year: 1966\n  }];\n  const defaultProps = {\n    options: top100Films,\n    getOptionLabel: option => option.title\n  };\n  const flatProps = {\n    options: top100Films.map(option => option.title)\n  };\n\n  const handleUniSearch = e => {\n    let value = e.target.value;\n    if (!value) return;\n    setloading(true);\n    searchUniversities(value).then(response => {\n      setloading(false);\n      setuniversities(response);\n    });\n  };\n\n  const [value, setValue] = React.useState(null);\n\n  const handleFormSubmit = () => {\n    // let uni = universities.find(\n    //   (item) => item.name == university.name\n    // );\n    closeModal();\n    router.push(\"/products?m_uni=\" + university.name); // console.log(uni)\n  };\n\n  const classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(StyledDialog, {\n    open: open,\n    onClose: closeModal,\n    \"aria-labelledby\": \"form-dialog-title\",\n    className: classes.modal\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(CloseIcon, {\n    onClick: closeModal,\n    className: classes.closeIcon\n  }), __jsx(\"img\", {\n    src: logo,\n    alt: \"\",\n    className: classes.image\n  }), __jsx(Typography, {\n    variant: \"h5\",\n    className: classes.title\n  }, \"Fill Important Details\"), __jsx(Typography, null, \"To make Your Search Easy Kindly Please Select Your College Name or Location\"), __jsx(\"form\", {\n    className: classes.container\n  }, __jsx(Autocomplete, {\n    className: classes.Autocomplete,\n    required: true,\n    options: universities,\n    getOptionLabel: option => {\n      return option.name;\n    },\n    getOptionSelected: (option, value) => option.name === value.name,\n    loading: loading // value={university}\n    ,\n    onInputChange: e => e && handleUniSearch(e) // onChange={(e) => updateformData(e, \"university\")}\n    ,\n    onSelect: e => e.target.value && setuniversity({\n      name: e.target.value\n    }),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Type Your College Name\",\n      margin: \"normal\"\n    }))\n  }), __jsx(Button, {\n    variant: \"contained\",\n    className: classes.Button,\n    onClick: handleFormSubmit\n  }, \"Done\"))))));\n};\n\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}