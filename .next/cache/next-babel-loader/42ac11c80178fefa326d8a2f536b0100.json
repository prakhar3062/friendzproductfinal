{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst updateDialog = (action, dialogs) => {\n  const alreadyUpdatedDialog = dialogs.map(elem => {\n    if (elem.id === action.dialog.id) {\n      return Object.assign(elem, action.dialog);\n    }\n\n    return elem;\n  });\n  return [...alreadyUpdatedDialog];\n};\n\nconst lazyFetchMessages = (action, messages) => {\n  const newArr = action.history.reverse().concat(messages[action.dialogId]);\n  return _objectSpread(_objectSpread({}, {}), {}, {\n    [action.dialogId]: newArr\n  });\n};\n\nconst sortedDialog = (action, dialogs) => {\n  const {\n    message,\n    count\n  } = action;\n  const updateDialog = dialogs.map(elem => {\n    if (elem.id === message.dialog_id) {\n      const newObj = {\n        last_message: message.body,\n        last_message_date_sent: message.date_sent,\n        updated_date: message.date_sent,\n        unread_messages_count: count ? elem.unread_messages_count += 1 : elem.unread_messages_count\n      };\n      return Object.assign(elem, newObj);\n    }\n\n    return elem;\n  });\n\n  const sort = (items, inverted = false) => items.sort((itemA, itemB) => {\n    const result = new Date(itemB.last_message_date_sent * 1000) - new Date(itemA.last_message_date_sent * 1000);\n    return inverted ? !result : result;\n  });\n\n  const result = sort(updateDialog);\n  return [...result];\n};\n\nconst updateStatusMessages = (action, message) => {\n  if (Object.keys(message).length === 0) {\n    return message;\n  }\n\n  const newMessages = message[action.dialogId].map((elem, index) => {\n    if (elem.id === action.msgId) {\n      const updateSendStatus = _objectSpread({}, elem);\n\n      updateSendStatus.send_state = action.msg.send_state;\n      return _objectSpread({}, updateSendStatus);\n    }\n\n    return elem;\n  });\n\n  const result = _objectSpread(_objectSpread({}, message), {}, {\n    [action.dialogId]: newMessages\n  });\n\n  return result;\n};\n\nconst fetchUsers = (action, users) => {\n  const newObjUsers = {};\n  action.forEach(elem => {\n    newObjUsers[elem.id] = elem;\n  });\n  return _objectSpread(_objectSpread({}, users), newObjUsers);\n};\n\nexport { updateDialog, lazyFetchMessages, sortedDialog, updateStatusMessages, fetchUsers };","map":null,"metadata":{},"sourceType":"module"}