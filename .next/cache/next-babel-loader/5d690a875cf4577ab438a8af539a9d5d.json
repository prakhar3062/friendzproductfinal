{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent, Typography, Button } from \"@material-ui/core\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { searchCategories, searchUniversities, searchCities, searchEventCategories, getCities, getCategories, getEventCategories } from \"../../apis/global-api\";\nimport { commonStyles, desktopStyles, mobileStyles, TabStyles } from \"./styles\";\nimport { useRouter } from \"next/router\";\nimport TuneIcon from \"@material-ui/icons/Tune\";\nimport { SELECTED_FILTER_UNIVERSITY, PAGE_PRODUCTS, SELECTED_FILTER_RESET } from \"../../constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addVisited } from \"../../redux/actions/PageVisited\";\nconst useStyles = makeStyles(theme => _objectSpread(_objectSpread({}, commonStyles), {}, {\n  [theme.breakpoints.up(\"sm\")]: desktopStyles,\n  [theme.breakpoints.between(\"xs\", \"sm\")]: TabStyles,\n  [theme.breakpoints.down(\"xs\")]: mobileStyles\n}));\n\nfunction Sidebar({\n  type = \"\",\n  showFilterBtn = false,\n  m_uni,\n  query\n}) {\n  const {\n    0: categories,\n    1: setcategories\n  } = useState([]);\n  const {\n    0: selectedCategories,\n    1: setselectedCategories\n  } = useState([]);\n  const {\n    0: universities,\n    1: setuniversities\n  } = useState([]);\n  const {\n    0: selecteduniversities,\n    1: setselecteduniversities\n  } = useState([]);\n  const {\n    0: Cities,\n    1: setCities\n  } = useState([]);\n  const {\n    0: selectedCities,\n    1: setselectedCities\n  } = useState([]);\n  const {\n    0: producttype,\n    1: setproducttype\n  } = useState([]);\n  const {\n    0: uniMsg,\n    1: setUniMsg\n  } = useState(\"\");\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const pageVisited = useSelector(state => state.pageVisited);\n\n  const handleTypeChange = x => {\n    setproducttype(producttype.includes(x) ? producttype.filter(c => c !== x) : [...producttype, x]);\n  };\n\n  useEffect(() => {\n    if (type == \"events\") {\n      getEventCategories().then(response => {\n        setcategories(response.categories.data);\n      });\n    } else {\n      getCategories().then(response => {\n        setcategories(response.categories.data);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    console.log(\"query\", query);\n    setshowsidebar(!showFilterBtn); // console.log('pageVisited',pageVisited.includes(PAGE_PRODUCTS))\n\n    let {\n      m_city,\n      m_cat,\n      type\n    } = query;\n\n    if (m_uni) {\n      if (!selecteduniversities.length && m_uni) {\n        const now = new Date();\n        searchUniversities(m_uni).then(response => {\n          setselecteduniversities(response);\n          setExpanded(\"panel3\");\n          let data = {\n            response: response,\n            expiry: now.getTime()\n          };\n          localStorage.setItem(SELECTED_FILTER_UNIVERSITY, JSON.stringify(data));\n        });\n      }\n    }\n\n    if (!selectedCities.length && m_city) {\n      searchCities(m_city).then(response => {\n        setselectedCities(response.data);\n        setExpanded(\"panel2\");\n      });\n    }\n\n    if (!selectedCategories.length && m_cat) {\n      searchCategories(m_cat).then(response => {\n        setselectedCategories(response.data);\n        setExpanded(\"panel1\");\n      });\n    }\n\n    if (!producttype.length && type) {\n      handleTypeChange(type);\n    }\n  }, [m_uni]);\n\n  const handleCatSearch = e => {\n    console.log(type);\n    let value = e ? e.target.value : \"\";\n\n    if (!value) {\n      setcategories([]);\n      return;\n    }\n\n    if (type == \"events\") {\n      searchEventCategories(value).then(response => {\n        setcategories(response.data);\n      });\n    } else {\n      searchCategories(value).then(response => {\n        setcategories(response.data);\n      });\n    }\n  };\n\n  const handleUniSearch = e => {\n    let value = e ? e.target.value : \"\";\n\n    if (!value) {\n      setuniversities([]);\n      return;\n    }\n\n    searchUniversities(value).then(response => {\n      setuniversities(response);\n    });\n  };\n\n  const handleCitySearch = e => {\n    let value = e ? e.target.value : \"\";\n\n    if (!value) {\n      setCities([]);\n      return;\n    }\n\n    searchCities(value).then(response => {\n      console.log(\"college\", response);\n      setCities(response.data);\n    });\n  };\n\n  const {\n    0: state,\n    1: setState\n  } = useState([]);\n\n  const handleChange = (event, type, val) => {\n    console.log(event.target.checked);\n    console.log(type);\n    console.log(val);\n\n    if (type == \"category\") {\n      if (selectedCategories.some(item => item.id === val.id)) {\n        setselectedCategories(selectedCategories.filter(c => c.id !== val.id));\n      } else {\n        setselectedCategories([...selectedCategories, val]);\n      }\n\n      console.log(selectedCategories);\n    }\n\n    if (type == \"cities\") {\n      if (selectedCities.some(item => item.id === val.id)) {\n        setselectedCities(selectedCities.filter(c => c.id !== val.id));\n      } else {\n        setselectedCities([...selectedCities, val]);\n      }\n    }\n\n    if (type == \"university\") {\n      if (selecteduniversities.some(item => item.id === val.id)) {\n        setselecteduniversities(selecteduniversities.filter(c => c.id !== val.id));\n      } else {\n        setselecteduniversities([...selecteduniversities, val]);\n      }\n    } // setState({ ...state, [event.target.name]: event.target.checked });\n\n  };\n\n  const [expanded, setExpanded] = React.useState(\"panel1\");\n\n  const handlePanelChange = panel => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  const {\n    mobile,\n    sports,\n    cars\n  } = state;\n  const classes = useStyles();\n\n  const filterSearch = () => {\n    let cities = selectedCities.map(v => v.name).join(\",\");\n    let categories = selectedCategories.map(v => v.name).join(\",\");\n    let universities = selecteduniversities.map(v => v.name).join(\",\");\n    console.log(cities, categories, universities);\n\n    if (!universities.length) {\n      localStorage.setItem(SELECTED_FILTER_RESET, true);\n    }\n\n    let p_type = producttype.length == 1 ? producttype[0] : \"\";\n    let query = \"?m_city=\" + cities + \"&m_cat=\" + categories + \"&m_uni=\" + universities + \"&type=\" + p_type;\n    let reqquery = \"?m_uni=\" + universities;\n\n    if (type == \"events\") {\n      window.location.replace(\"/events\" + query); // router.push(\"/events\" + query);\n    } else if (type == \"requests\") {\n      window.location.replace(\"/buy-request\" + reqquery); // router.push(\"/events\" + query);\n    } else {\n      window.location.replace(\"/products\" + query); // router.push(\"/products\" + query);\n    }\n  };\n\n  const toggle = () => {\n    setshowsidebar(!showsidebar);\n  };\n\n  const [showsidebar, setshowsidebar] = React.useState(false); // const [showsidebar, setshowsidebar] = React.useState(!showFilterBtn);\n\n  return __jsx(React.Fragment, null, showFilterBtn && __jsx(Button, {\n    className: classes.fliterBtn,\n    onClick: toggle\n  }, __jsx(TuneIcon, null), \"Filter\"), showsidebar && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.heading\n  }, \"FILTER\"), type != \"events\" && type != \"requests\" && __jsx(Accordion, {\n    expanded: expanded === \"panel0\",\n    onChange: handlePanelChange(\"panel0\")\n  }, __jsx(AccordionSummary, {\n    expandIcon: __jsx(ExpandMoreIcon, null),\n    \"aria-controls\": \"panel0a-content\",\n    id: \"panel0a-header\"\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.title\n  }, \"Type\")), __jsx(Checkbox, {\n    value: \"buy\",\n    checked: producttype.includes(\"buy\"),\n    inputProps: {\n      \"aria-label\": \"Checkbox A\"\n    },\n    onChange: () => handleTypeChange(\"buy\")\n  }), \" \", \"Buy\", __jsx(Checkbox, {\n    value: \"rental\",\n    checked: producttype.includes(\"rental\"),\n    inputProps: {\n      \"aria-label\": \"Checkbox A\"\n    },\n    onChange: () => handleTypeChange(\"rental\")\n  }), \"Rent\"), type != \"requests\" && __jsx(Accordion, {\n    expanded: expanded === \"panel1\",\n    onChange: handlePanelChange(\"panel1\")\n  }, __jsx(AccordionSummary, {\n    expandIcon: __jsx(ExpandMoreIcon, null),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\"\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.title\n  }, \"Category\")), __jsx(\"input\", {\n    className: classes.searchField,\n    type: \"text\",\n    placeholder: \"search Categoty\",\n    onKeyUp: handleCatSearch\n  }), __jsx(AccordionDetails, null, __jsx(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl\n  }, __jsx(FormGroup, null, categories && categories.map(cat => __jsx(FormControlLabel, {\n    key: cat.id,\n    control: __jsx(Checkbox, {\n      onChange: e => handleChange(e, \"category\", cat),\n      color: \"primary\"\n    }),\n    label: cat.name,\n    checked: selectedCategories.filter(item => item.id == cat.id).length > 0\n  })))), categories && categories.length < 1 && selectedCategories.length > 0 && __jsx(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl\n  }, __jsx(FormGroup, null, selectedCategories && selectedCategories.map(cat => __jsx(FormControlLabel, {\n    key: cat.id,\n    control: __jsx(Checkbox, {\n      onChange: e => handleChange(e, \"category\", cat),\n      color: \"primary\"\n    }),\n    checked: true,\n    label: cat.name\n  })))))), type != \"requests\" && __jsx(Accordion, {\n    expanded: expanded === \"panel2\",\n    onChange: handlePanelChange(\"panel2\")\n  }, __jsx(AccordionSummary, {\n    expandIcon: __jsx(ExpandMoreIcon, null),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\"\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.title\n  }, \"City\")), __jsx(\"input\", {\n    className: classes.searchField,\n    type: \"text\",\n    placeholder: \"search City\",\n    onKeyUp: handleCitySearch\n  }), __jsx(AccordionDetails, null, __jsx(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl\n  }, __jsx(FormGroup, null, Cities && Cities.map(cat => __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      onChange: e => handleChange(e, \"cities\", cat),\n      color: \"primary\",\n      name: \"mobile\"\n    }),\n    label: cat.name,\n    checked: selectedCities.filter(item => item.id == cat.id).length > 0\n  })))), Cities.length < 1 && selectedCities.length > 0 && __jsx(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl\n  }, __jsx(FormGroup, null, selectedCities && selectedCities.map(cat => __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      onChange: e => handleChange(e, \"cities\", cat),\n      color: \"primary\"\n    }),\n    checked: true,\n    label: cat.name\n  })))))), __jsx(Accordion, {\n    expanded: expanded === \"panel3\",\n    onChange: handlePanelChange(\"panel3\")\n  }, __jsx(AccordionSummary, {\n    expandIcon: __jsx(ExpandMoreIcon, null),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\"\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.title\n  }, \"College\")), __jsx(\"input\", {\n    className: classes.searchField,\n    type: \"text\",\n    placeholder: \"search College\",\n    onKeyUp: handleUniSearch\n  }), __jsx(AccordionDetails, null, __jsx(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl\n  }, __jsx(FormGroup, null, universities && universities.map(cat => __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      onChange: e => handleChange(e, \"university\", cat),\n      color: \"primary\",\n      name: \"mobile\"\n    }),\n    label: cat.name\n  })))), universities.length < 1 && selecteduniversities.length > 0 && __jsx(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl\n  }, __jsx(FormGroup, null, selecteduniversities && selecteduniversities.map(cat => __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      onChange: e => handleChange(e, \"university\", cat),\n      color: \"primary\"\n    }),\n    checked: true,\n    label: cat.name\n  }))))))), __jsx(Button, {\n    className: classes.filterBtn,\n    onClick: filterSearch\n  }, \"Filter\")));\n}\n\nexport default Sidebar;","map":null,"metadata":{},"sourceType":"module"}