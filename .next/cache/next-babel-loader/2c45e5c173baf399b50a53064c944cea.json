{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Layout from \"../src/Layout\";\nimport { Card, CardContent, TextField, Button, Container, Grid, Typography } from \"@material-ui/core\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport SubtitlesIcon from \"@material-ui/icons/Subtitles\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { CreateContact } from \"../src/apis/global-api\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nconst useStyles = makeStyles(theme => ({\n  section: {\n    padding: \"5rem 0\",\n    position: \"relative\",\n    overflow: \"hidden\"\n  },\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  pdTitle: {\n    marginBottom: \"2rem\"\n  },\n  card: {\n    boxShadow: \"none\",\n    border: \"#ccc solid 1px\",\n    height: \"100%\",\n    background: \"rgba(255, 255, 255, 0.6)\",\n    \"&::before\": {\n      content: '\"\"',\n      background: \"url(/static/images/circleCenter.svg)\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\",\n      top: \"55%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      height: \"540px\",\n      width: \"540px\",\n      position: \"absolute\",\n      zIndex: \"-1\"\n    },\n    \"&::after\": {\n      content: '\"\"',\n      background: \"url(/static/images/circleCenter.svg)\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\",\n      bottom: \"-15rem\",\n      left: \"-25rem\",\n      height: \"50rem\",\n      width: \"50rem\",\n      position: \"absolute\",\n      zIndex: \"-1\"\n    }\n  },\n  cardBody: {\n    padding: \"2rem !important\"\n  },\n  formInput: {\n    marginBottom: \"2rem\",\n    width: \"50%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\"\n    }\n  },\n  formInputFullWidth: {\n    width: \"100%\"\n  },\n  formInputField: {\n    width: \"80%\",\n    \"& .MuiTextField-root\": {\n      width: \"100%\"\n    }\n  },\n  formInputFieldFull: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"90%\",\n      \"& .MuiTextField-root\": {\n        width: \"100%\"\n      },\n      \"& textarea\": {\n        width: \"100%\",\n        border: \"none\",\n        borderBottom: \"solid 1px #ccc\",\n        height: \"100px\"\n      },\n      \"& textarea:focus\": {\n        outline: \"none\",\n        borderBottom: \"solid 1px var(--wrapper)\"\n      }\n    }\n  },\n  formControl: {\n    width: \"100%\"\n  },\n  Button: {\n    width: \"80%\",\n    height: \"50px\",\n    marginTop: \"1rem\",\n    backgroundColor: \"var(--wrapper)\",\n    color: \"#fff\",\n    fontSize: \"1rem\",\n    boxShadow: \"none\",\n    maxWidth: \"200px\"\n  },\n  Images: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& img\": {\n      width: \"125px\",\n      height: \"125px\",\n      objectFit: \"contain\",\n      marginRight: \"10px\",\n      marginBottom: \"10px\",\n      border: \"solid 1px #333 \"\n    },\n    \"& video\": {\n      width: \"125px\",\n      height: \"125px\",\n      objectFit: \"contain\",\n      marginRight: \"10px\",\n      marginBottom: \"10px\",\n      border: \"solid 1px #333 \"\n    }\n  },\n  AddBtn: {\n    border: \"solid 1px #333\",\n    width: \"125px\",\n    height: \"125px\",\n    display: \"grid\"\n  },\n  dialogeCustom: {\n    \"& .MuiGrid-spacing-xs-8\": {\n      width: \"100%\",\n      margin: \"0\"\n    }\n  }\n}));\nexport default function Contact({\n  user,\n  formtype = \"add\",\n  product = {}\n}) {\n  const classes = useStyles();\n  const {\n    0: name,\n    1: setname\n  } = useState();\n  const {\n    0: email,\n    1: setemail\n  } = useState();\n  const {\n    0: message,\n    1: setmessage\n  } = useState();\n  const {\n    0: errs,\n    1: seterrs\n  } = useState({});\n  const {\n    0: backdrop,\n    1: setbackdrop\n  } = useState(false);\n  const {\n    0: formerrs,\n    1: setformerrs\n  } = useState([]);\n  const {\n    0: snackbar,\n    1: setsnackbar\n  } = useState(false);\n  const {\n    0: snackbarMsg,\n    1: setsnackbarMsg\n  } = useState(\"\");\n  const {\n    0: snackbarType,\n    1: setsnackbarType\n  } = useState(\"success\");\n  useEffect(() => {\n    if (product.images) {\n      let updatedImages = [];\n      let updatedImagesInfo = [];\n      product.images.map((fileData, index) => {\n        updatedImages = updatedImages.concat(fileData.base64_data);\n        updatedImagesInfo = updatedImagesInfo.concat({\n          type: fileData.type,\n          data: fileData.link\n        });\n\n        if (index + 1 == product.images.length) {\n          setfiles(updatedImages);\n          setfilesInfo(updatedImagesInfo);\n        }\n      });\n    }\n  }, [product]);\n\n  const updateformData = (e, type) => {\n    e.preventDefault();\n    eval(\"set\" + type + \"('\" + e.target.value + \"')\");\n  };\n\n  const checkValidation = () => {\n    setformerrs(\"\");\n\n    if (!name || !email || !message) {\n      setformerrs([\"All fields are required\"]);\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = e => {\n    e && e.preventDefault();\n    let is_valid = checkValidation();\n\n    if (!is_valid) {\n      return;\n    }\n\n    setbackdrop(true);\n    let data = {\n      name: name,\n      email: email,\n      message: message\n    };\n    CreateContact(data).then(response => {\n      setbackdrop(false);\n\n      if (response.error) {\n        setformerrs(response.msg);\n        setsnackbar(true);\n        setsnackbarMsg(\"Form not submitted.Try again later\");\n        setsnackbarType(\"error\");\n      } else {\n        setsnackbar(true);\n        setsnackbarMsg(\"Form  submitted successfully\");\n        setsnackbarType(\"success\");\n        setname('');\n        setemail('');\n        setmessage('');\n      }\n    });\n  };\n\n  const handlesnackbar = () => {\n    setsnackbar(!snackbar);\n  };\n\n  return __jsx(Layout, null, __jsx(Snackbar, {\n    open: snackbar,\n    autoHideDuration: 6000,\n    onClose: handlesnackbar\n  }, __jsx(Alert, {\n    onClose: handlesnackbar,\n    severity: snackbarType\n  }, snackbarMsg)), __jsx(\"section\", {\n    className: classes.section\n  }, backdrop && __jsx(Backdrop, {\n    className: classes.backdrop,\n    open: backdrop // onClick={handleClose}\n\n  }, __jsx(CircularProgress, {\n    color: \"inherit\"\n  })), __jsx(Container, {\n    maxWidth: \"xl\"\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    lg: 9,\n    md: 9,\n    sm: 8,\n    xs: 12,\n    style: {\n      margin: \"auto\"\n    }\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, \"Contact Us\"), __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(SubtitlesIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"name\",\n    label: \"Name\",\n    value: name,\n    onChange: e => updateformData(e, \"name\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(LocalOfferIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"email\",\n    label: \"Email\",\n    value: email,\n    type: \"email\",\n    onChange: e => updateformData(e, \"email\")\n  })))), __jsx(\"div\", {\n    className: `${classes.formInput} ${classes.formInputFullWidth}`\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(DetailsIcon, null)), __jsx(Grid, {\n    item: true,\n    className: `${classes.formInputField} ${classes.formInputFieldFull}`\n  }, __jsx(\"textarea\", {\n    id: \"message\",\n    label: \"Message\",\n    value: message,\n    placeholder: \"Message\",\n    onChange: e => updateformData(e, \"message\")\n  })))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    className: classes.Button\n  }, \"Submit\")), formerrs.length > 0 && formerrs.map((msg, index) => __jsx(Typography, {\n    color: \"error\",\n    key: `error${index}`\n  }, msg)))))))));\n}","map":null,"metadata":{},"sourceType":"module"}