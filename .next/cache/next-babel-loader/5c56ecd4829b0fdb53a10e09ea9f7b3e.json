{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { commonStyles, desktopStyles, tabStyles, mobileStyles } from \"./styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { createMessage, fetchMessages, readAll } from \"../../apis/chat-api\";\nimport dialogs from \"../../redux/reducers/dialogs\";\nimport Message from \"./Message\";\nimport { AddToPhotosSharp } from \"@material-ui/icons\";\nimport moment from \"moment\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport ConnectyCube from \"connectycube\"; // import Loader from \"react-loader-spinner\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteAllMessages, pushMessage, setMessages } from \"../../redux/actions/messages\"; // import useSocket from \"../../Utils/useSocket\";\n\nimport Messages from \"./Messages\";\nimport { selectedDialog } from \"../../redux/actions/selectedDialog\";\nimport { getSeller, sendChatUpdate, updateOpenStatus } from \"../../apis/global-api\";\nconst useStyles = makeStyles(theme => _objectSpread(_objectSpread({}, commonStyles), {}, {\n  [theme.breakpoints.up(\"sm\")]: desktopStyles,\n  [theme.breakpoints.up(\"md\")]: tabStyles,\n  [theme.breakpoints.down(\"sm\")]: mobileStyles\n}));\n\nconst ChatBox = ({\n  selectedDialogVal,\n  auth,\n  goBack,\n  dialogsArr,\n  updateDialogSeenBySeller,\n  deleteDialogSeenBySeller\n}) => {\n  const classes = useStyles();\n  const {\n    0: loading,\n    1: setloading\n  } = useState(true);\n  const {\n    0: prevdialog,\n    1: setprevdialog\n  } = useState({});\n  const {\n    0: data,\n    1: setdata\n  } = useState({});\n  const {\n    0: showConfirmBox,\n    1: setshowConfirmBox\n  } = useState(false);\n  const {\n    0: showConfirmLoader,\n    1: setshowConfirmLoader\n  } = useState(false);\n  const {\n    0: page,\n    1: setpage\n  } = useState(0);\n  const {\n    0: userMsg,\n    1: setuserMsg\n  } = useState(\"\");\n  const msgs = useSelector(state => state.messages); // const socket = useSocket()\n  // const [msgs, setmsgs] = useState([]);\n\n  const {\n    0: user,\n    1: setuser\n  } = useState(\"\");\n  const {\n    0: title,\n    1: settitle\n  } = useState(\"\");\n  const {\n    0: link,\n    1: setlink\n  } = useState(\"\");\n  const {\n    0: chatType,\n    1: setchatType\n  } = useState(\"\");\n  const {\n    0: connected,\n    1: setconnected\n  } = useState(false);\n  const dispatch = useDispatch();\n  const chatBoxREf = useRef(\"\");\n  useEffect(() => {\n    if (!selectedDialogVal.id) {\n      setloading(false);\n      setuser(\"\");\n      settitle(\"\");\n      setlink(\"\");\n      setpage(0);\n      return;\n    } // if (prevdialog.id != selectedDialogVal.id) {\n    // setloading(false);\n    // setloading(true);\n\n\n    setprevdialog(selectedDialogVal);\n    getMessages(1); // }\n\n    let dialog = selectedDialogVal;\n\n    if (dialog && dialog.users.length) {\n      let user = dialog.users.filter(item => item.user.id != auth.id);\n      user[0].user && getSeller(user[0].user.id).then(data => data && data.id && setuser(data)); // setuser(user[0].user);\n    }\n\n    if (dialog && dialog.related_data) {\n      let type = dialog.related;\n      let related_data = dialog.related_data;\n      let link = `/products/item/${related_data.id}`;\n\n      if (type == \"request\") {\n        link = `/buy-request`;\n      }\n\n      settitle(related_data.title);\n      setlink(link);\n\n      if (dialog.opened_by_seller == 0 && dialog.related_data.seller_id == auth.id) {\n        setshowConfirmBox(true);\n      }\n    } // if (socket && auth && !connected) {\n    //     socket.on(`message.chat${auth.id}`, message => {\n    //         handleNewMsg(message)\n    //     });\n    //     setconnected(true)\n    // }\n\n  }, [selectedDialogVal]);\n\n  const handleNewMsg = message => {\n    // if (message.data && message.data.dialog_id == selectedDialogVal.id) {\n    dispatch(pushMessage(message.data)); //     console.log('message2', message.data.dialog_id == selectedDialogVal.id)\n    //     // setmsgs(msgs.concat([message.data]))\n    // }\n    // console.log('message', message, selectedDialogVal)\n  };\n\n  const getMessages = pageNo => {\n    setuserMsg(\"\");\n    let count = pageNo ? pageNo : page + 1; // return\n\n    const dialogId = selectedDialogVal.connecty_dialog_id;\n    let skip = (count - 1) * 10;\n    const params = {\n      chat_dialog_id: dialogId,\n      sort_desc: \"date_sent\",\n      limit: 10,\n      skip: skip\n    };\n    console.log(\"selectedDialogVal\", selectedDialogVal);\n    ConnectyCube.chat.message.list(params).then(messages => {\n      if (messages.items.length) {\n        let newMsgs = messages.items.reverse().concat(msgs.messages);\n        setTimeout(() => {\n          scrollToBottom(!msgs.messages.length ? \"\" : 30);\n        }, 200);\n        dispatch(setMessages(newMsgs, selectedDialogVal));\n        setpage(count);\n      } else if (!msgs.messages.length) {\n        dispatch(setMessages([], selectedDialogVal));\n\n        if (count == 1) {\n          setuserMsg(selectedDialogVal.related == 'product' ? 'Do you still have this product?' : 'Do you still have this request');\n        }\n\n        setpage(-1);\n      }\n\n      ConnectyCube.chat.getLastUserActivity(userId).then(result => {\n        console.log(\"lastactive\", result);\n        const userId = result.userId;\n        const seconds = result.seconds; // 'userId' was 'seconds' ago\n      }).catch(error => {});\n    }).catch(error => {});\n  }; // const getMessages = (data, msgs = []) => {\n  //     // return\n  //     if (!msgs.length) {\n  //         dispatch(deleteAllMessages())\n  //     }\n  //     let count = 1;\n  //     if (data && data.current_page) {\n  //         count = data.current_page + 1;\n  //     }\n  //     let q = `?page=${count}`;\n  //     let dialog = selectedDialogVal;\n  //     if (!dialog) {\n  //         setloading(false);\n  //         return;\n  //     }\n  //     fetchMessages(dialog.id, q).then((data) => {\n  //         if (data && data.data) {\n  //             let newMsgs = data.data.reverse()\n  //             let msgData = newMsgs.concat(msgs);\n  //             dispatch(setMessages(msgData, selectedDialogVal))\n  //             console.log('testcount', count, msgData.length, selectedDialogVal.related)\n  //             if (count == 1 && !msgData.length) {\n  //                 setuserMsg(selectedDialogVal.related == 'product' ? 'Do you still have this product?' : '')\n  //             }\n  //             // setmsgs(msgData);\n  //             setdata(data);\n  //         }\n  //         if (!msgs.length) {\n  //             setTimeout(() => {\n  //                 scrollToBottom()\n  //             }, 200);\n  //         } else {\n  //             scrollToBottom(30)\n  //         }\n  //         // readAll(dialog.id, auth.id).then(data => console.log(data))\n  //     });\n  // };\n\n\n  const scrollToBottom = (height = \"\") => {\n    setloading(false);\n\n    if (!chatBoxREf || !chatBoxREf.current) {\n      return;\n    }\n\n    chatBoxREf.current.scrollTop = height ? height : chatBoxREf.current.scrollHeight; // chatBoxREf.current.scrollTop = chatBoxREf.current.scrollHeight\n  };\n\n  const handleChatBoxScroll = e => {\n    let target = e.target;\n\n    if (!msgs.messages.length || page < 0) {\n      return;\n    }\n\n    if (!target.scrollTop) {\n      // setdialogLoader(true)\n      // getDialogs();\n      getMessages();\n    }\n  };\n\n  const sendMsg = e => {\n    e.preventDefault();\n\n    if (!userMsg) {\n      return;\n    }\n\n    let dialog = selectedDialogVal;\n    const date = Math.floor(Date.now() / 1000);\n    let message = {\n      type: \"groupchat\",\n      body: userMsg,\n      message: userMsg,\n      dialog_id: dialog.connecty_dialog_id,\n      extension: {\n        save_to_history: 1,\n        dialog_id: dialog.connecty_dialog_id,\n        // sender_id: '2066645',\n        sender_id: auth.connectycube_user.connectycube_id,\n        date_sent: date\n      },\n      markable: 1,\n      sender_id: auth.connectycube_user.connectycube_id\n    };\n    dispatch(pushMessage(message)); // setmsgs(msgs.concat([data]))\n\n    setuserMsg(\"\");\n    message.id = ConnectyCube.chat.helpers.getBsonObjectId();\n    message = ConnectyCube.chat.send(dialog.xmpp_room_jid, message);\n    ConnectyCube.chat.getLastUserActivity(user.connectycube_user.connectycube_id).then(result => {\n      console.log(\"resultconect\", result);\n      const userId = result.userId;\n      const seconds = result.seconds;\n\n      if (seconds > 500) {\n        sendChatUpdate(user.id);\n        var message = {\n          app_id: process.env.ONESIGNAL_APP_ID,\n          contents: {\n            en: \"You recieved a new message.\"\n          },\n          filters: [{\n            field: \"tag\",\n            key: \"user\",\n            relation: \"=\",\n            value: user.id\n          }],\n          url: process.env.APP_URL + \"/chat\"\n        };\n        fetch(\"https://onesignal.com/api/v1/notifications\", {\n          headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            Authorization: \"Basic \" + process.env.ONESIGNAL_REST_KEY\n          },\n          method: \"post\",\n          body: JSON.stringify(message) // body: JSON.stringify(data),\n\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw Error(`Request rejected with status ${response.status}`);\n          }\n        }).then(responseData => {\n          console.log(\"responseDatasadsad\", responseData);\n          return responseData;\n        }).catch(error => console.log(\"responseDatasadsad\", error));\n      } // 'userId' was 'seconds' ago\n\n    }).catch(error => {});\n    setTimeout(() => {\n      scrollToBottom();\n    }, 200);\n  };\n\n  const handleResponse = status => {\n    setshowConfirmLoader(true);\n    updateOpenStatus(selectedDialogVal.id, status, auth.id).then(resp => {\n      console.log(resp);\n      setshowConfirmLoader(false);\n\n      if (status == \"yes\") {\n        setshowConfirmBox(false);\n        updateDialogSeenBySeller(selectedDialogVal, dialogsArr);\n      } else {\n        deleteDialogSeenBySeller(selectedDialogVal, dialogsArr);\n      }\n    });\n  }; // const sendMsg = (e) => {\n  //     e.preventDefault()\n  //     if (!userMsg) {\n  //         return\n  //     }\n  //     let data = {\n  //         dialog_id: selectedDialogVal.id,\n  //         user_id: auth.id,\n  //         message: userMsg,\n  //         created_at: new Date().toISOString()\n  //     }\n  //     dispatch(pushMessage(data))\n  //     // setmsgs(msgs.concat([data]))\n  //     setuserMsg('')\n  //     createMessage(data)\n  //         .then(resp => {\n  //             // console.log(resp)\n  //         })\n  //         .catch((err) => console.log(err))\n  //     socket.emit(\"sendmessage\", {\n  //         user: `message.chat${user.id}`,\n  //         type: 'message',\n  //         data: data\n  //     });\n  //     // console.log(userMsg)\n  // }\n\n\n  if (!selectedDialogVal.id) {\n    return __jsx(\"div\", {\n      className: \"right\"\n    }, __jsx(\"div\", {\n      className: \"top\"\n    }), __jsx(\"div\", {\n      className: \"chat\"\n    }, !loading && !dialogsArr.length && __jsx(\"div\", {\n      className: \"emptyDialog\"\n    }, __jsx(\"img\", {\n      src: \"/static/images/undraw_typing.svg\"\n    }), __jsx(Typography, null, \"Your message box is empty\")), !loading && dialogsArr.length > 0 && __jsx(\"div\", {\n      className: \"emptyDialog\"\n    }, __jsx(Typography, null, \"Please select a dialog to start chat\"))));\n  }\n\n  return __jsx(\"div\", {\n    className: \"right\"\n  }, __jsx(\"div\", {\n    className: \"top\"\n  }, __jsx(\"div\", {\n    className: classes.flex\n  }, __jsx(KeyboardBackspaceIcon, {\n    className: classes.backBtn,\n    onClick: goBack\n  }), __jsx(\"span\", null, \"To:\", \" \", __jsx(\"span\", {\n    className: \"name\"\n  }, user.first_name, \" \", user.last_name))), link ? __jsx(\"p\", null, __jsx(\"a\", {\n    href: link\n  }, title)) : __jsx(\"p\", null, title)), __jsx(\"div\", {\n    className: \"chat\",\n    onScroll: handleChatBoxScroll,\n    ref: chatBoxREf\n  }, loading && __jsx(\"div\", {\n    className: \"emptyDialog\"\n  }, __jsx(CircularProgress, {\n    color: \"primary\",\n    size: 30\n  })), __jsx(Messages, {\n    auth: auth\n  })), __jsx(\"div\", {\n    className: \"write\"\n  }, !loading && __jsx(React.Fragment, null, __jsx(\"a\", {\n    href: \"javascript:;\",\n    className: \"test\"\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"chatmessage\",\n    id: \"chatmessage\",\n    value: userMsg // className={classes.vHide}\n    ,\n    onChange: e => setuserMsg(e.target.value)\n  }), __jsx(\"a\", {\n    href: \"javascript:;\",\n    className: \"write-link send\",\n    onClick: sendMsg\n  }))), showConfirmBox && __jsx(\"div\", {\n    className: \"confirm-availability\"\n  }, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Please Confirm if this product is a valid product\"), link ? __jsx(\"p\", null, __jsx(\"a\", {\n    href: link\n  }, title)) : __jsx(\"p\", null, title), !showConfirmLoader && __jsx(\"div\", {\n    className: \"buttons\"\n  }, __jsx(Button, {\n    size: \"large\",\n    color: \"primary\",\n    variant: \"contained\",\n    style: {\n      marginRight: 5\n    },\n    onClick: () => handleResponse(\"yes\")\n  }, \"Yes\"), __jsx(Button, {\n    size: \"large\",\n    color: \"secondary\",\n    variant: \"contained\",\n    onClick: () => handleResponse(\"no\")\n  }, \"No\")), showConfirmLoader && __jsx(CircularProgress, {\n    color: \"primary\",\n    size: 30\n  }), __jsx(\"p\", {\n    className: \"info\"\n  }, \"By clicking on 'Yes', you can continue to chat\"), __jsx(\"p\", {\n    className: \"info\"\n  }, \"By clicking on 'No', the product will be automatically deleted.\")));\n};\n\nexport default ChatBox;","map":null,"metadata":{},"sourceType":"module"}