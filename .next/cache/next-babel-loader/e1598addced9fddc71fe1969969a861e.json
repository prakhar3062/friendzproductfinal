{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ConnectyCube from 'connectycube';\nimport appConfig from '../../../appConfig';\nimport User from '../models/user';\nimport store from '../../redux/store'; // import { setCurrentUser } from '../actions/currentUser'\n\nimport { getImageLinkFromUID } from '../helpers/file';\nimport { chatAuthenticated } from '../../redux/actions/chatUser';\nimport { chatConnection } from '../../redux/actions/chatConnected';\nimport { chatUnreadCount } from '../../redux/actions/chatUnread';\nimport { pushMessage } from '../../redux/actions/messages'; // import { LogOut } from '../reducers/index'\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n  }\n\n  _createClass(AuthService, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ConnectyCube.init.apply(ConnectyCube, _toConsumableArray(appConfig.connectyCubeConfig));\n\n              case 2:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }() // async autologin() {\n    //     const checkUserSessionFromStore = await this.getUserSession()\n    //     if (checkUserSessionFromStore) {\n    //         const data = JSON.parse(checkUserSessionFromStore)\n    //         await this.signIn({ login: data.login, password: data.password })\n    //         return 'home'\n    //     } else { return 'auth' }\n    // }\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        var session, currentUser, customSession;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return ConnectyCube.createSession(params);\n\n              case 2:\n                session = _context2.sent;\n                currentUser = new User(session.user);\n                session.user.avatar = getImageLinkFromUID(session.user.avatar); // work around\n\n                session.user.full_name = session.user.login;\n                store.dispatch(chatAuthenticated(session));\n                customSession = Object.assign({}, currentUser, {\n                  password: params.password\n                });\n                this.setUserSession(customSession);\n                this.connect(customSession.id, customSession.password);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }() // async signUp(params) {\n    //     await ConnectyCube.createSession()\n    //     await ConnectyCube.users.signup(params)\n    //     return this.signIn(params)\n    // }\n\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(userId, password) {\n        var _this = this;\n\n        var isConnected;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                isConnected = ConnectyCube.chat.isConnected;\n\n                if (!isConnected) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                store.dispatch(chatConnection());\n                this.getUnread();\n                _context3.next = 8;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return ConnectyCube.chat.connect({\n                  userId: userId,\n                  password: password\n                }).then(function (error, contactlist) {\n                  _this.setUpListeners();\n\n                  store.dispatch(chatConnection());\n\n                  _this.getUnread();\n                });\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function connect(_x2, _x3) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"getUnread\",\n    value: function () {\n      var _getUnread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return ConnectyCube.chat.message.unreadCount().then(function (result) {\n                  store.dispatch(chatUnreadCount(result.total));\n                  console.log('unread', reasult);\n                })[\"catch\"](function (error) {});\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getUnread() {\n        return _getUnread.apply(this, arguments);\n      }\n\n      return getUnread;\n    }()\n  }, {\n    key: \"setUpListeners\",\n    value: function () {\n      var _setUpListeners = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ConnectyCube.chat.onMessageListener = this.onMessage.bind(this);\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function setUpListeners() {\n        return _setUpListeners.apply(this, arguments);\n      }\n\n      return setUpListeners;\n    }()\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(userId, message) {\n      var user = localStorage.getItem(\"user\");\n      user = user ? JSON.parse(user) : \"\";\n      console.log(message, userId, user.connectycube_user.connectycube_id);\n\n      if (!user || !user.connectycube_user || userId == user.connectycube_user.connectycube_id) {\n        return;\n      }\n\n      message.message = message.body;\n      message.device_token = user.device_token;\n      message.notif = true;\n      store.dispatch(pushMessage(message));\n    }\n  }, {\n    key: \"setUserSession\",\n    value: function setUserSession(userSession) {\n      return localStorage.setItem(AuthService.CURRENT_USER_SESSION_KEY, JSON.stringify(userSession));\n    }\n  }, {\n    key: \"getUserSession\",\n    value: function getUserSession() {\n      return localStorage.getItem(AuthService.CURRENT_USER_SESSION_KEY);\n    } // async logout() {\n    //     localStorage.clear()\n    //     await ConnectyCube.logout()\n    //     store.dispatch(LogOut())\n    // }\n\n  }]);\n\n  return AuthService;\n}();\n\n_defineProperty(AuthService, \"CURRENT_USER_SESSION_KEY\", \"CURRENT_USER_SESSION_KEY\");\n\n_defineProperty(AuthService, \"DEVICE_TOKEN_KEY\", \"DEVICE_TOKEN_KEY\");\n\nvar authService = new AuthService();\nObject.freeze(authService);\nexport default authService;","map":null,"metadata":{},"sourceType":"module"}