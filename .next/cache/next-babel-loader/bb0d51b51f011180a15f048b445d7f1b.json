{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Button, Container, Grid, Card, CardContent, Typography } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PhoneIphoneIcon from \"@material-ui/icons/PhoneIphone\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport AttachmentOutlinedIcon from \"@material-ui/icons/AttachmentOutlined\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport { commonStyles, desktopStyles, mobileStyles, TabStyles } from \"./styles\";\nimport Link from \"next/link\";\nimport PageLoader from \"../PageLoader\";\nimport { editProfile, updateProfileImg } from \"../../apis/auth-api\";\nconst useStyles = makeStyles(theme => _objectSpread(_objectSpread({}, commonStyles), {}, {\n  [theme.breakpoints.up(\"sm\")]: desktopStyles,\n  [theme.breakpoints.between(\"xs\", \"sm\")]: TabStyles,\n  [theme.breakpoints.down(\"xs\")]: mobileStyles\n}));\nimport { useDispatch } from \"react-redux\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { searchUniversities } from \"../../apis/global-api\";\nimport { authenticated } from \"../../redux/actions/auth\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport ImageCropper from \"../ImageCropper\";\nimport Router from \"next/router\";\nimport { isPhone } from \"../../Utils/helpers\";\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nconst EditProfile = ({\n  user\n}) => {\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: searchloading,\n    1: setsearchloading\n  } = useState(false);\n  const {\n    0: error,\n    1: seterror\n  } = useState([]);\n  const {\n    0: firstname,\n    1: setfirstname\n  } = useState(user.first_name);\n  const {\n    0: lastname,\n    1: setlastname\n  } = useState(user.last_name);\n  const {\n    0: university,\n    1: setuniversity\n  } = useState({\n    name: user.university ? user.university.name : \"\"\n  });\n  const {\n    0: phone_no,\n    1: setphone_no\n  } = useState(user.phone_number);\n  const {\n    0: universities,\n    1: setuniversities\n  } = useState([{\n    name: user.university ? user.university.name : \"\",\n    id: user.university ? user.university.id : \"\"\n  }]);\n  const {\n    0: branch,\n    1: setbranch\n  } = useState(user.branch);\n  const {\n    0: snackbar,\n    1: setsnackbar\n  } = useState(false);\n  const {\n    0: snackbarMsg,\n    1: setsnackbarMsg\n  } = useState(\"\");\n  const {\n    0: snackbarType,\n    1: setsnackbarType\n  } = useState(\"success\");\n  const {\n    0: imageCrop,\n    1: setimageCrop\n  } = useState(false);\n  const {\n    0: imgFile,\n    1: setimgFile\n  } = useState(\"\");\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  useEffect(() => {\n    if (!user.is_complete) {\n      setsnackbar(true);\n      setsnackbarMsg(\"Please complete your profile before proceeding\");\n      setsnackbarType(\"error\");\n    }\n  }, []);\n\n  const updateProfile = () => {\n    let university_id = universities.find(item => item.name == university.name);\n    let data = {\n      first_name: firstname,\n      last_name: lastname,\n      university_id: university_id.id,\n      phone_number: phone_no,\n      branch: branch,\n      email: user.email\n    };\n\n    if (phone_no && !isPhone(phone_no)) {\n      seterror(['Phone number is not valid']);\n      return;\n    }\n\n    setloading(true);\n    editProfile(data, user.id).then(data => {\n      setloading(false);\n\n      if (data && data.error) {\n        seterror(data.msg);\n      } else if (data && data.body && data.body.user) {\n        dispatch(authenticated(data.body.user, data.body.user.api_token));\n        setsnackbar(true);\n        setsnackbarMsg(\"Updated successfully.\");\n        setsnackbarType(\"success\");\n        Router.push(\"/\");\n      } else {\n        setsnackbar(true);\n        setsnackbarMsg(\"There is some error.Please try again later\");\n        setsnackbarType(\"error\");\n      }\n    });\n  };\n\n  const updateformData = (e, type) => {\n    e.preventDefault();\n    eval(\"set\" + type + \"('\" + e.target.value + \"')\");\n  };\n\n  const handleUniSearch = e => {\n    let value = e.target.value;\n    if (!value) return;\n    setsearchloading(true);\n    searchUniversities(value).then(response => {\n      setsearchloading(false);\n      setuniversities(response);\n    });\n  };\n\n  const handlesnackbar = () => {\n    setsnackbar(!snackbar);\n  };\n\n  const handleProfileChange = e => {\n    let files = e.target.files;\n\n    if (files.length) {\n      var tmppath = URL.createObjectURL(event.target.files[0]);\n      setimgFile(tmppath);\n      setimageCrop(true);\n    }\n  };\n\n  const saveProfileImage = data => {\n    let formData = {\n      img: data,\n      api_token: user.api_token\n    };\n    updateProfileImg(formData).then(data => {\n      setimageCrop(false);\n      setimgFile(\"\");\n\n      if (data && data.error) {\n        seterror(data.msg);\n      } else if (data && data.body && data.body.user) {\n        dispatch(authenticated(data.body.user, data.body.user.api_token));\n        setsnackbar(true);\n        setsnackbarMsg(\"Updated successfully.\");\n        setsnackbarType(\"success\");\n      } else {\n        setsnackbar(true);\n        setsnackbarMsg(\"There is some error.Please try again later\");\n        setsnackbarType(\"error\");\n      }\n    });\n  };\n\n  return __jsx(\"section\", {\n    className: classes.section\n  }, __jsx(Container, {\n    maxWidth: \"xl\"\n  }, __jsx(PageLoader, {\n    loading: loading\n  }), __jsx(ImageCropper, {\n    open: imageCrop,\n    handleSave: saveProfileImage,\n    handleClose: () => setimageCrop(!imageCrop),\n    image: imgFile\n  }), __jsx(Snackbar, {\n    open: snackbar,\n    autoHideDuration: 6000,\n    onClose: handlesnackbar\n  }, __jsx(Alert, {\n    onClose: handlesnackbar,\n    severity: snackbarType\n  }, snackbarMsg)), __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    lg: 12,\n    md: 12,\n    sm: 12,\n    xs: 12\n  }, __jsx(Typography, {\n    className: classes.editTitle,\n    variant: \"h3\"\n  }, \"Edit Profile Details\")), __jsx(Grid, {\n    item: true,\n    lg: 3,\n    md: 3,\n    sm: 4,\n    xs: 12\n  }, __jsx(Box, {\n    className: classes.ProfileContainer\n  }, __jsx(Typography, {\n    variant: \"h5\"\n  }, \"Add image\"), __jsx(\"div\", {\n    className: classes.ProfileImage\n  }, __jsx(\"img\", {\n    src: user.profile_img ? user.profile_img : \"/static/images/placeholder.jpg\"\n  }), __jsx(\"input\", {\n    type: \"file\",\n    name: \"file\",\n    id: \"file\",\n    className: classes.vHide,\n    onChange: handleProfileChange,\n    accept: \"image/*\"\n  }), __jsx(\"label\", {\n    htmlFor: \"file\"\n  }, __jsx(AttachmentOutlinedIcon, {\n    className: classes.uploadIcon\n  }))), __jsx(\"a\", {\n    href: \"/profile\"\n  }, __jsx(Button, {\n    variant: \"contained\",\n    className: classes.Button\n  }, \"View Profile\")))), __jsx(Grid, {\n    item: true,\n    lg: 9,\n    md: 9,\n    sm: 8,\n    xs: 12\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    autoComplete: \"off\"\n  }, __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PersonIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"fname\",\n    label: \"First Name\",\n    value: firstname,\n    onChange: e => updateformData(e, \"firstname\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PersonIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"lname\",\n    label: \"Last Name\",\n    value: lastname,\n    onChange: e => updateformData(e, \"lastname\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(MailOutlineIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"email\",\n    label: \"Email\",\n    value: user.email,\n    disabled: true\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PhoneIphoneIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"number\",\n    label: \"Phone Number\",\n    value: phone_no,\n    onChange: e => updateformData(e, \"phone_no\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(SchoolIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(Autocomplete, {\n    required: true,\n    options: universities,\n    getOptionLabel: option => {\n      return option.name;\n    },\n    getOptionSelected: (option, value) => option.name === value.name,\n    loading: searchloading,\n    value: university,\n    onInputChange: e => e && handleUniSearch(e) // onChange={(e) => updateformData(e, \"university\")}\n    ,\n    onSelect: e => setuniversity({\n      name: e.target.value\n    }),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Search College\",\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, null, searchloading ? __jsx(CircularProgress, {\n          color: \"primary\",\n          size: 20\n        }) : null, params.InputProps.endAdornment)\n      })\n    }))\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(DetailsIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"branch\",\n    label: \"Course\",\n    value: branch,\n    onChange: e => updateformData(e, \"branch\")\n  })))), __jsx(Button, {\n    variant: \"contained\",\n    className: classes.Button,\n    onClick: updateProfile\n  }, \"Update\")), __jsx(\"div\", null, error.length > 0 && error.map((text, index) => __jsx(Typography, {\n    color: \"error\",\n    key: `err-${index}`\n  }, text)))))))));\n};\n\nexport default EditProfile;","map":null,"metadata":{},"sourceType":"module"}