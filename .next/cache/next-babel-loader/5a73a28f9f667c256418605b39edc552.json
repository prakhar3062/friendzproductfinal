{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport AuthService from \"../services/authService\";\nimport { useSelector, useDispatch } from \"react-redux\"; // import ChatService from \"../../redux/services/chat-service\";\n\nimport Link from \"next/link\";\nimport { unreadMsg } from \"../../apis/chat-api\";\nimport ConnectyCube from 'connectycube';\nimport appConfig from '../../../appConfig';\nimport { chatUnauthenticated } from \"../../redux/actions/chatUser\";\nimport { chatReset } from \"../../redux/actions/chatConnected\";\nimport chatService from \"../../redux/services/chat-service\";\nimport { unSelectedDialog } from \"../../redux/actions/selectedDialog\";\nimport Router from 'next/router';\n\nconst ChatMessageIcon = () => {\n  const authUser = useSelector(state => state.auth_user.user);\n  const accessToken = useSelector(state => state.auth_user.accessToken);\n  const chatUnreadCount = useSelector(state => state.chatUnreadCount);\n  const {\n    0: count,\n    1: setcount\n  } = useState();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (authUser && authUser.connectycube_user) {\n      dispatch(chatUnauthenticated());\n      dispatch(chatReset());\n      dispatch(unSelectedDialog());\n      let init = AuthService.init();\n\n      if (init && authUser.connectycube_user) {\n        console.log();\n        AuthService.login({\n          email: authUser.email,\n          password: authUser.connectycube_user.password\n        }).then(user => {}).catch(error => {\n          console.log(error);\n        });\n      } // unreadMsg(authUser.id).then((data) => {\n      //     data && setcount(data);\n      // });\n\n    }\n  }, []);\n\n  const connectChat = async () => {\n    const CREDENTIALS = {\n      email: authUser.email,\n      password: authUser.connectycube_user.password\n    };\n    const CONFIG = {\n      on: {\n        sessionExpired: (handleResponse, retry) => {\n          // call handleResponse() if you do not want to process a session expiration,\n          // so an error will be returned to origin request\n          // handleResponse();\n          // JS SDK v2\n          ConnectyCube.createSession().then(retry).catch(error => {});\n        }\n      }\n    };\n    let init = await ConnectyCube.init(...appConfig.connectyCubeConfig, CONFIG);\n    console.log(init);\n\n    if (init) {\n      ConnectyCube.login(CREDENTIALS).then(session => {\n        console.log('session', session);\n      }).catch(error => {});\n    }\n  };\n\n  const setUpListeners = () => {\n    ConnectyCube.chat.onMessageListener = onMessage;\n    const opponentId = 2066645;\n    let message = {\n      type: 'groupchat',\n      body: \"How are you today?\",\n      extension: {\n        save_to_history: 1,\n        dialog_id: '5f6f3676ca8bf42a744c3f4b'\n      },\n      markable: 1\n    };\n    message = ConnectyCube.chat.send(opponentId, message);\n    console.log('message', message);\n  };\n\n  function onMessage(userId, message) {\n    console.log('[ConnectyCube.chat.onMessageListener] callback:', userId, message);\n  }\n\n  const handleChatClick = () => {\n    if (!accessToken) {\n      window.location.replace('/?signup=open');\n    } else {\n      Router.push('/chat');\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(IconButton, {\n    color: \"inherit\",\n    onClick: handleChatClick\n  }, __jsx(Badge, {\n    badgeContent: chatUnreadCount,\n    color: \"secondary\"\n  }, __jsx(ChatIcon, null))));\n};\n\nexport default ChatMessageIcon;","map":null,"metadata":{},"sourceType":"module"}