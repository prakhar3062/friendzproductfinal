{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { searchUniversities } from '../../apis/global-api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Typography from '@material-ui/core/Typography';\nimport { simpleSignup, login, googleSignup } from '../../apis/auth-api';\nimport { useDispatch } from 'react-redux';\nimport { authenticated } from '../../redux/actions/auth';\nimport { useRouter } from 'next/router';\nimport { GoogleLogin } from 'react-google-login';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nconst useStyles = makeStyles(theme => ({\n  form: {\n    padding: '1.5rem 2.0rem',\n    [theme.breakpoints.up('sm')]: {\n      margin: '2.5rem'\n    }\n  },\n  modal: {\n    padding: '0.5rem'\n  },\n  button: {\n    '&:focus': {\n      background: 'rgb(177, 90, 16)'\n    },\n    '& .MuiCircularProgress-colorPrimary': {\n      marginLeft: '10px',\n      color: '#fff'\n    }\n  }\n}));\nexport const AuthForm = ({\n  type\n}) => {\n  const {\n    0: firstname,\n    1: setfirstname\n  } = useState('');\n  const {\n    0: lastname,\n    1: setlastname\n  } = useState('');\n  const {\n    0: email,\n    1: setemail\n  } = useState('');\n  const {\n    0: university,\n    1: setuniversity\n  } = useState({\n    name: ''\n  });\n  const {\n    0: password,\n    1: setpassword\n  } = useState('');\n  const {\n    0: showpassword,\n    1: setshowpassword\n  } = useState(false);\n  const {\n    0: confirm_password,\n    1: setconfirm_password\n  } = useState('');\n  const {\n    0: showconfirm_password,\n    1: setshowconfirm_password\n  } = useState(false);\n  const {\n    0: phone_no,\n    1: setphone_no\n  } = useState('');\n  const {\n    0: errs,\n    1: seterrs\n  } = useState({});\n  const {\n    0: universities,\n    1: setuniversities\n  } = useState([]);\n  const {\n    0: branch,\n    1: setbranch\n  } = useState('');\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: btnloading,\n    1: setbtnloading\n  } = useState(false);\n  const {\n    0: backdrop,\n    1: setbackdrop\n  } = useState(true);\n  const {\n    0: formerrs,\n    1: setformerrs\n  } = useState([]);\n  const {\n    0: showRedirect,\n    1: setshowRedirect\n  } = useState(false);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const router = useRouter();\n\n  const handleSubmit = e => {\n    setformerrs([]);\n    submitSignUp();\n  };\n\n  const submitLogin = () => {\n    setshowRedirect(false);\n    setformerrs([]);\n    setbtnloading(true);\n    let data = {\n      email: email,\n      password: password\n    };\n    login(data).then(response => {\n      if (response.error) {\n        setbtnloading(false);\n        setformerrs(response.msg);\n      } else {\n        setbtnloading(false);\n        let user = response.body.user;\n        let accessToken = response.body.user.api_token;\n        let favEvents = response.body.favEvents;\n        let favProducts = response.body.favProducts;\n        setLogin(user, accessToken, favEvents, favProducts);\n        setshowRedirect(true);\n      }\n    });\n  };\n\n  const submitSignUp = () => {\n    setshowRedirect(false);\n    setbtnloading(true); // let university_id = universities.find(\n    //   (item) => item.name == university.name\n    // );\n\n    let data = {\n      // first_name: firstname,\n      // last_name: lastname,\n      email: email,\n      // university_id: university_id.id,\n      password: password // phone_number: phone_no,\n      // branch: branch,\n\n    };\n    simpleSignup(data).then(response => {\n      if (response.error) {\n        setbtnloading(false);\n        setformerrs(response.msg);\n      } else {\n        let user = response.body.user;\n        let accessToken = response.body.user.api_token;\n        setbtnloading(false);\n        let favEvents = response.body.favEvents;\n        let favProducts = response.body.favProducts;\n        setLogin(user, accessToken, favEvents, favProducts);\n        setshowRedirect(true);\n      }\n    });\n  };\n\n  const setLogin = (user, accessToken, favEvents, favProducts) => {\n    console.log(user, accessToken);\n    dispatch(authenticated(user, accessToken, favEvents, favProducts));\n\n    if (user.is_complete) {\n      router.push('/');\n    } else {\n      router.push('/profile/edit');\n    }\n  };\n\n  const responseGoogleSuccess = response => {\n    let data = {\n      email: response.profileObj.email,\n      google_id: response.googleId\n    }; // return\n\n    googleSignup(data).then(response => {\n      if (response.error) {\n        setbtnloading(false);\n        setformerrs(response.msg);\n      } else {\n        let user = response.body.user;\n        let accessToken = response.body.user.api_token;\n        setbtnloading(false);\n        let favEvents = response.body.favEvents;\n        let favProducts = response.body.favProducts;\n        setLogin(user, accessToken, favEvents, favProducts);\n        setshowRedirect(true);\n      }\n    });\n  };\n\n  const responseGoogleFailure = response => {\n    console.log(response); // alert('Oops!! there was some problem while logging in.')\n  };\n\n  const backdropClose = () => {\n    setbackdrop(false);\n  };\n\n  const validateform = e => {\n    e.preventDefault();\n\n    if (type == 'login') {\n      submitLogin();\n      return;\n    }\n\n    let err = {};\n\n    if (password != confirm_password) {\n      err.no_same = 'true';\n    }\n\n    if (password.length < 8) {\n      err.pwd_length = 'true';\n    } // if (!university.name) {\n    //   err.university = \"true\";\n    // }\n\n\n    seterrs(err);\n    let has_error = Object.keys(err).length;\n\n    if (!parseInt(has_error)) {\n      handleSubmit();\n    }\n  };\n\n  const updateformData = (e, type) => {\n    e.preventDefault();\n    eval('set' + type + \"('\" + e.target.value + \"')\");\n  };\n\n  const handleUniSearch = e => {\n    let value = e.target.value;\n    if (!value) return;\n    setloading(true);\n    searchUniversities(value).then(response => {\n      setloading(false);\n      setuniversities(response);\n    });\n  };\n\n  const gotoForgotPassword = () => {\n    router.push('/forgot-password');\n  };\n\n  return __jsx(\"div\", {\n    className: classes.form\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    className: \"googleBtn\"\n  }, __jsx(GoogleLogin, {\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    buttonText: type == 'login' ? 'Login with Google' : 'SignUp with Google',\n    onSuccess: responseGoogleSuccess,\n    onFailure: responseGoogleFailure,\n    cookiePolicy: 'single_host_origin'\n  })), __jsx(\"br\", null), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, \"or\"), __jsx(\"br\", null), __jsx(\"form\", {\n    className: classes.container,\n    onSubmit: validateform\n  }, type == 'signup' && __jsx(React.Fragment, null), __jsx(TextField, {\n    required: true,\n    margin: \"dense\",\n    label: \"Email Address\",\n    type: \"email\",\n    fullWidth: true,\n    value: email,\n    onChange: e => updateformData(e, 'email'),\n    name: \"email\"\n  }), type == 'signup' && __jsx(React.Fragment, null, errs['university'] && __jsx(Typography, {\n    color: \"error\"\n  }, \"Please select a university.\")), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    }\n  }, __jsx(TextField, {\n    required: true,\n    margin: \"dense\",\n    label: \"Password\",\n    type: showpassword ? 'text' : 'password',\n    fullWidth: true,\n    value: password,\n    onChange: e => updateformData(e, 'password'),\n    name: \"password\"\n  }), __jsx(\"span\", {\n    onClick: () => setshowpassword(!showpassword)\n  }, ' ', showpassword ? __jsx(Visibility, null) : __jsx(VisibilityOff, null))), type == 'signup' && __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    }\n  }, __jsx(TextField, {\n    required: true,\n    margin: \"dense\",\n    label: \"Confirm Password\",\n    type: showconfirm_password ? 'text' : 'password',\n    fullWidth: true,\n    value: confirm_password,\n    onChange: e => updateformData(e, 'confirm_password'),\n    name: \"confirm_password\"\n  }), __jsx(\"span\", {\n    onClick: () => setshowconfirm_password(!showconfirm_password)\n  }, ' ', showconfirm_password ? __jsx(Visibility, null) : __jsx(VisibilityOff, null))), errs['no_same'] && __jsx(Typography, {\n    color: \"error\"\n  }, \"Password must match with confirm password\"), errs['pwd_length'] && __jsx(Typography, {\n    color: \"error\"\n  }, \"Password must have 8 characters\"), __jsx(\"div\", null, formerrs.length > 0 && formerrs.map((text, index) => __jsx(Typography, {\n    color: \"error\",\n    key: `err-${index}`\n  }, text))), __jsx(Button, {\n    type: \"submit\",\n    className: classes.button,\n    variant: \"contained\",\n    color: \"primary\"\n  }, type == 'login' ? 'Login' : 'SignUp', btnloading ? __jsx(CircularProgress, {\n    color: \"primary\",\n    size: 20\n  }) : null)), __jsx(\"p\", {\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: gotoForgotPassword\n  }, \"Forgot password ? click \", __jsx(\"span\", null, \"here\")), showRedirect && __jsx(Typography, {\n    color: \"primary\"\n  }, \"Redirecting to profile page!!\", ' ', __jsx(CircularProgress, {\n    color: \"primary\",\n    size: 20\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}