{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar updateDialog = function updateDialog(action, dialogs) {\n  var alreadyUpdatedDialog = dialogs.map(function (elem) {\n    if (elem.id === action.dialog.id) {\n      return Object.assign(elem, action.dialog);\n    }\n\n    return elem;\n  });\n  return _toConsumableArray(alreadyUpdatedDialog);\n};\n\nvar lazyFetchMessages = function lazyFetchMessages(action, messages) {\n  var newArr = action.history.reverse().concat(messages[action.dialogId]);\n  return _objectSpread(_objectSpread({}, {}), {}, _defineProperty({}, action.dialogId, newArr));\n};\n\nvar sortedDialog = function sortedDialog(action, dialogs) {\n  var message = action.message,\n      count = action.count;\n  var updateDialog = dialogs.map(function (elem) {\n    if (elem.id === message.dialog_id) {\n      var newObj = {\n        last_message: message.body,\n        last_message_date_sent: message.date_sent,\n        updated_date: message.date_sent,\n        unread_messages_count: count ? elem.unread_messages_count += 1 : elem.unread_messages_count\n      };\n      return Object.assign(elem, newObj);\n    }\n\n    return elem;\n  });\n\n  var sort = function sort(items) {\n    var inverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return items.sort(function (itemA, itemB) {\n      var result = new Date(itemB.last_message_date_sent * 1000) - new Date(itemA.last_message_date_sent * 1000);\n      return inverted ? !result : result;\n    });\n  };\n\n  var result = sort(updateDialog);\n  return _toConsumableArray(result);\n};\n\nvar updateStatusMessages = function updateStatusMessages(action, message) {\n  if (Object.keys(message).length === 0) {\n    return message;\n  }\n\n  var newMessages = message[action.dialogId].map(function (elem, index) {\n    if (elem.id === action.msgId) {\n      var updateSendStatus = _objectSpread({}, elem);\n\n      updateSendStatus.send_state = action.msg.send_state;\n      return _objectSpread({}, updateSendStatus);\n    }\n\n    return elem;\n  });\n\n  var result = _objectSpread(_objectSpread({}, message), {}, _defineProperty({}, action.dialogId, newMessages));\n\n  return result;\n};\n\nvar fetchUsers = function fetchUsers(action, users) {\n  var newObjUsers = {};\n  action.forEach(function (elem) {\n    newObjUsers[elem.id] = elem;\n  });\n  return _objectSpread(_objectSpread({}, users), newObjUsers);\n};\n\nexport { updateDialog, lazyFetchMessages, sortedDialog, updateStatusMessages, fetchUsers };","map":null,"metadata":{},"sourceType":"module"}