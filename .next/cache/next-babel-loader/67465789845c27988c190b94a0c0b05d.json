{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Layout from \"../Layout\";\nimport { Box, Card, CardContent, TextField, Button, Container, Grid, Typography } from \"@material-ui/core\";\nimport { DropzoneDialog } from \"material-ui-dropzone\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport SubtitlesIcon from \"@material-ui/icons/Subtitles\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport EventIcon from '@material-ui/icons/Event';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport ContactPhoneIcon from '@material-ui/icons/ContactPhone';\nimport LinkIcon from '@material-ui/icons/Link';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { searchUniversities, searchEventCategories, CreateOrder } from \"../apis/global-api\";\nimport { AddEvent, UpdateEvent } from \"../apis/auth-api\";\nimport CategoryIcon from \"@material-ui/icons/Category\";\nimport PhotoCameraOutlinedIcon from \"@material-ui/icons/PhotoCameraOutlined\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticated } from \"../redux/actions/auth\";\nimport { useRouter } from \"next/router\";\nimport { fileToBase64, isPhone } from \"../Utils/helpers\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from '@material-ui/icons/Add';\nimport axios from \"axios\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nconst useStyles = makeStyles(theme => ({\n  section: {\n    padding: \"5rem 0\",\n    position: \"relative\",\n    overflow: \"hidden\"\n  },\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  pdTitle: {\n    marginBottom: \"2rem\"\n  },\n  card: {\n    boxShadow: \"none\",\n    border: \"#ccc solid 1px\",\n    height: \"100%\",\n    background: \"rgba(255, 255, 255, 0.6)\",\n    \"&::before\": {\n      content: '\"\"',\n      background: \"url(/static/images/circleCenter.svg)\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\",\n      top: \"55%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      height: \"540px\",\n      width: \"540px\",\n      position: \"absolute\",\n      zIndex: \"-1\"\n    },\n    \"&::after\": {\n      content: '\"\"',\n      background: \"url(/static/images/circleCenter.svg)\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\",\n      bottom: \"-15rem\",\n      left: \"-25rem\",\n      height: \"50rem\",\n      width: \"50rem\",\n      position: \"absolute\",\n      zIndex: \"-1\"\n    }\n  },\n  cardBody: {\n    padding: \"2rem !important\"\n  },\n  formInput: {\n    marginBottom: \"2rem\",\n    width: \"50%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\"\n    }\n  },\n  formInputFullWidth: {\n    width: \"100%\"\n  },\n  formInputField: {\n    width: \"80%\",\n    \"& .MuiTextField-root\": {\n      width: \"100%\"\n    }\n  },\n  formInputFieldFull: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"90%\",\n      \"& .MuiTextField-root\": {\n        width: \"100%\"\n      },\n      '& textarea': {\n        width: '100%',\n        border: 'none',\n        borderBottom: 'solid 1px #ccc',\n        height: '100px',\n        background: 'transparent'\n      },\n      '& textarea:focus': {\n        outline: 'none',\n        borderBottom: 'solid 1px var(--theme)'\n      }\n    }\n  },\n  formControl: {\n    width: \"100%\"\n  },\n  Button: {\n    width: \"80%\",\n    height: \"50px\",\n    marginTop: \"1rem\",\n    backgroundColor: \"var(--theme)\",\n    color: \"#fff\",\n    fontSize: \"1rem\",\n    boxShadow: \"none\",\n    maxWidth: \"200px\"\n  },\n  Images: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& img\": {\n      width: \"125px\",\n      height: \"125px\",\n      objectFit: \"contain\",\n      marginRight: \"10px\",\n      marginBottom: \"10px\",\n      border: \"solid 1px #333 \"\n    },\n    \"& video\": {\n      width: \"125px\",\n      height: \"125px\",\n      objectFit: \"contain\",\n      marginRight: \"10px\",\n      marginBottom: \"10px\",\n      border: \"solid 1px #333 \"\n    }\n  },\n  AddBtn: {\n    border: \"solid 1px #333\",\n    width: \"125px\",\n    height: \"125px\",\n    display: \"grid\"\n  },\n  dialogeCustom: {\n    \"& .MuiGrid-spacing-xs-8\": {\n      width: \"100%\",\n      margin: \"0\"\n    }\n  }\n}));\nexport default function NewEvent({\n  user,\n  formtype = \"add\",\n  event = {}\n}) {\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: files,\n    1: setfiles\n  } = useState([]);\n  const {\n    0: filesInfo,\n    1: setfilesInfo\n  } = useState([]);\n  const {\n    0: title,\n    1: settitle\n  } = useState(event.title);\n  const {\n    0: description,\n    1: setdescription\n  } = useState(event.description);\n  const {\n    0: promo_code,\n    1: setpromo_code\n  } = useState(event.promo_code);\n  const {\n    0: price,\n    1: setprice\n  } = useState(event.price);\n  const {\n    0: eventDate,\n    1: seteventdate\n  } = useState(event.event_date);\n  const {\n    0: eventTime,\n    1: seteventtime\n  } = useState(event.event_time);\n  const {\n    0: contact,\n    1: setcontact\n  } = useState(event.contact_number);\n  const {\n    0: bookLink,\n    1: setbooklink\n  } = useState(event.book_event_link);\n  const {\n    0: visitLink,\n    1: setvisitlink\n  } = useState(event.visit_website_link);\n  const {\n    0: socialLinks,\n    1: setsociallinks\n  } = useState([{\n    text: event.social_profiles ? event.social_profiles.text : \"\",\n    link: event.social_profiles ? event.social_profiles.link : \"\"\n  }]);\n  const {\n    0: university,\n    1: setuniversity\n  } = useState({\n    name: event.university ? event.university.name : \"\",\n    id: event.university ? event.university.id : \"\"\n  });\n  const {\n    0: category,\n    1: setcategory\n  } = useState({\n    name: event.category ? event.category.name : \"\",\n    id: event.category ? event.category.id : \"\"\n  });\n  const {\n    0: errs,\n    1: seterrs\n  } = useState({});\n  const {\n    0: universities,\n    1: setuniversities\n  } = useState(event.university ? [{\n    name: event.university.name,\n    id: event.university.id\n  }] : []);\n  const {\n    0: categories,\n    1: setcategories\n  } = useState(event.category ? [{\n    name: event.category.name,\n    id: event.category.id\n  }] : []);\n  const {\n    0: promoCodeDicount,\n    1: setpromoCodeDicount\n  } = useState(0);\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: loadingUni,\n    1: setloadingUni\n  } = useState(false);\n  const {\n    0: backdrop,\n    1: setbackdrop\n  } = useState(false);\n  const {\n    0: formerrs,\n    1: setformerrs\n  } = useState([]);\n  const {\n    0: eventData,\n    1: seteventData\n  } = useState({});\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    0: snackbar,\n    1: setsnackbar\n  } = useState(false);\n  const {\n    0: snackbarMsg,\n    1: setsnackbarMsg\n  } = useState(\"\");\n  const {\n    0: snackbarType,\n    1: setsnackbarType\n  } = useState(\"success\");\n  useEffect(() => {\n    // let eventd = {\n    //   id: 2,\n    //   event_price: 100\n    // }\n    // paymentHandler(eventd)\n    // return\n    addFields();\n\n    if (event.images) {\n      let updatedImages = [];\n      let updatedImagesInfo = [];\n      event.images.map((fileData, index) => {\n        updatedImages = updatedImages.concat(fileData.base64_data);\n        updatedImagesInfo = updatedImagesInfo.concat({\n          type: fileData.type,\n          data: fileData.link\n        });\n\n        if (index + 1 == event.images.length) {\n          setfiles(updatedImages);\n          setfilesInfo(updatedImagesInfo);\n        }\n      });\n    }\n\n    if (event.social_profiles) {\n      let sp = [];\n      event.social_profiles.map((item, index) => {\n        sp = sp.concat({\n          text: item.text,\n          link: item.link\n        });\n\n        if (index + 1 == event.social_profiles.length) {\n          setsociallinks(sp);\n        }\n      });\n    }\n  }, [event]);\n\n  const handleInputChange = (e, index) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const list = [...socialLinks];\n    list[index][name] = value;\n    setsociallinks(list);\n  };\n\n  const addFields = () => {\n    if (socialLinks.length < 5) {\n      for (var i = 0; i < 5; i++) {\n        setsociallinks([...socialLinks, {\n          text: \"\",\n          link: \"\"\n        }]);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSave = filesArr => {\n    let count = 0;\n    filesArr.map((file, index) => {\n      count++;\n      const reader = new FileReader();\n      let filesArr = files;\n      let filesInfoArr = filesInfo;\n\n      reader.onload = event => {\n        console.log(\"testfile\", index, filesArr, filesArr); //store result into your state array.\n\n        filesArr[index] = event.target.result;\n        filesInfoArr[index] = {\n          type: file[\"type\"].split(\"/\")[0],\n          data: event.target.result\n        }; // let updatedImages = ();\n        // let updatedImagesInfo = ();\n\n        setfiles(filesArr);\n        setfilesInfo(filesInfoArr);\n\n        if (count == filesArr.length) {\n          setOpen(false);\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const updateformData = (e, type) => {\n    e.preventDefault();\n    eval(\"set\" + type + \"('\" + e.target.value + \"')\");\n  };\n\n  const handleUniSearch = e => {\n    let value = e ? e.target.value : \"\";\n    if (!value) return;\n    setloadingUni(true);\n    searchUniversities(value).then(response => {\n      setloadingUni(false);\n      setuniversities(response);\n    });\n  };\n\n  const handleCatSearch = e => {\n    let value = e ? e.target.value : \"\";\n    if (!value) return;\n    setloading(true);\n    searchEventCategories(value).then(response => {\n      setloading(false);\n      setcategories(response.data);\n    });\n  };\n\n  const checkValidation = () => {\n    setformerrs(\"\");\n\n    if (!title || !description || !price || !university.name || !category.name || !eventDate || !eventTime || !contact || !bookLink || !visitLink) {\n      setformerrs([\"All fields are required\"]);\n      return false;\n    }\n\n    if (!files.length) {\n      setformerrs([\"Images are required\"]);\n      return false;\n    }\n\n    if (!isPhone(contact)) {\n      setformerrs([\"Contact number is not valid.Please enter 10 digit number\"]);\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = (e, uploaded_files) => {\n    e && e.preventDefault();\n    let is_valid = checkValidation();\n\n    if (!is_valid) {\n      return;\n    }\n\n    setbackdrop(true);\n    let university_id = universities.find(item => item.name == university.name);\n    let category_id = categories.find(item => item.name == category.name);\n    let data = {\n      title: title,\n      description: description,\n      price: price,\n      university_id: university_id.id,\n      category_id: category_id.id,\n      event_date: eventDate,\n      event_time: eventTime,\n      contact_number: contact,\n      book_event_link: bookLink,\n      visit_website_link: visitLink,\n      social_profiles: socialLinks,\n      files: files,\n      seller_id: user.id,\n      active: event ? event.active : event.event_price > 0 ? false : true,\n      promo_code: promo_code\n    };\n    event = event ? event : eventData;\n\n    if (formtype == \"edit\" && event.id) {\n      UpdateEvent(data, event.id).then(response => {\n        if (response.error) {\n          setbackdrop(false);\n          setformerrs(response.msg);\n        } else {\n          if (event.event_price > 0 && !event.order_id) {\n            paymentHandler(response.body.event);\n          } else {\n            router.push(\"/profile/events\");\n          }\n        }\n      });\n    } else {\n      AddEvent(data).then(response => {\n        if (response.error) {\n          setbackdrop(false);\n          setformerrs(response.msg);\n        } else if (response.body && response.body.event) {\n          seteventData(response.body.event);\n\n          if (response.body.event.event_price > 0) {\n            paymentHandler(response.body.event, response.body.promo_code);\n          } else {\n            router.push(\"/profile/events\");\n          }\n        } else {\n          alert('there was some problem while, saving try it later');\n        }\n      });\n    }\n  };\n\n  const removeImage = index => {\n    let filterFiles = files.filter(function (file, i) {\n      return i !== index;\n    });\n    let filterFilesInfo = filesInfo.filter(function (file, i) {\n      return i !== index;\n    });\n    setfilesInfo(filterFilesInfo);\n    setfiles(filterFiles);\n  };\n\n  const handlesnackbar = () => {\n    setsnackbar(!snackbar);\n  };\n\n  const paymentHandler = async (event, promoCodeDetail) => {\n    if (!event) {\n      setsnackbar(true);\n      setsnackbarMsg(\"Event not valid\");\n      setsnackbarType(\"error\");\n    }\n\n    const APP_URL = process.env.APP_URL + '/';\n    let receipt_id = 'receipt_event' + event.id;\n    let event_price = event.event_price * 100;\n    let promo_code_id = 0;\n\n    if (promoCodeDetail != '') {\n      let discount = event_price * promoCodeDetail.amount / 100;\n      event_price = event_price - discount;\n      promo_code_id = promoCodeDetail.id;\n    } // e.preventDefault();\n\n\n    const orderUrl = `${APP_URL}order/${event_price}/${receipt_id}`; // return\n\n    const response = await axios.get(orderUrl);\n    const {\n      data\n    } = response;\n    const options = {\n      key: process.env.RAZOR_PAY_KEY_ID,\n      name: \"App\",\n      description: \"App description\",\n      order_id: data.id,\n      // modal:{\n      //   escape:false\n      // },\n      handler: async response => {\n        try {\n          const paymentId = response.razorpay_payment_id;\n          const url = `${APP_URL}capture/${paymentId}/${event_price}`;\n          console.log(url);\n          const captureResponse = await axios.post(url, {});\n          console.log(captureResponse.data);\n          let resp = JSON.parse(captureResponse.data);\n          let data = {\n            'reciept_id': receipt_id,\n            'rzp_transaction_id': resp.id,\n            'rzp_order_id': resp.order_id,\n            'status': resp.status,\n            'price': resp.amount / 100,\n            'user_id': user.id,\n            'type': 'event',\n            'event_id': event.id,\n            'promo_code_id': promo_code_id\n          };\n          CreateOrder(data).then(response => {\n            // console.log(response)\n            if (response.error) {\n              setbackdrop(false);\n              setformerrs(response.msg);\n            } else {\n              router.push(\"/profile/events\");\n            }\n          });\n        } catch (err) {\n          console.log(err);\n          alert('Oops !! There was some error while processing.Dont panic, just contact admin in case in case of emergency ');\n        }\n      },\n      \"modal\": {\n        \"ondismiss\": function () {\n          setbackdrop(false);\n          setsnackbar(true);\n          setsnackbarMsg(\"You have dismissed payment.Event will be in inactive mode until you enable it\");\n          setsnackbarType(\"error\");\n          console.log('dismissed');\n        }\n      } // theme: {\n      //   color: \"#686CFD\",\n      // },\n\n    };\n    const rzp1 = new window.Razorpay(options);\n    rzp1.open();\n  };\n\n  const showPayButton = () => {\n    let ev = event ? event : eventData;\n\n    if (ev.id && ev.event_price && ev.event_price > 0 && !ev.order_id) {\n      return __jsx(Button, {\n        onClick: () => paymentHandler(ev),\n        variant: \"secondary\",\n        className: classes.Button\n      }, \"Pay Now\");\n    }\n\n    return null;\n  };\n\n  return __jsx(Layout, null, __jsx(\"section\", {\n    className: classes.section\n  }, backdrop && __jsx(Backdrop, {\n    className: classes.backdrop,\n    open: backdrop // onClick={handleClose}\n\n  }, __jsx(CircularProgress, {\n    color: \"inherit\"\n  })), __jsx(Snackbar, {\n    open: snackbar,\n    autoHideDuration: 6000,\n    onClose: handlesnackbar\n  }, __jsx(Alert, {\n    onClose: handlesnackbar,\n    severity: snackbarType\n  }, snackbarMsg)), __jsx(Container, {\n    maxWidth: \"xl\"\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    lg: 9,\n    md: 9,\n    sm: 8,\n    xs: 12,\n    style: {\n      margin: \"auto\"\n    }\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, formtype == \"add\" ? \"Add\" : \"Edit\", \" Event Details\"), __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(SubtitlesIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"fname\",\n    label: \"Title\",\n    value: title,\n    onChange: e => updateformData(e, \"title\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(LocalOfferIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"lname\",\n    label: \"Price\",\n    value: price,\n    type: \"number\",\n    onChange: e => updateformData(e, \"price\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(EventIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"eventDate\",\n    label: \"\",\n    value: eventDate,\n    type: \"date\",\n    onChange: e => updateformData(e, \"eventdate\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(ScheduleIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"eventTime\",\n    label: \"\",\n    value: eventTime,\n    type: \"time\",\n    onChange: e => updateformData(e, \"eventtime\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(CategoryIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(Autocomplete, {\n    required: true,\n    options: categories,\n    getOptionLabel: option => {\n      return option.name;\n    },\n    getOptionSelected: (option, value) => option.name === value.name,\n    loading: loading,\n    value: category,\n    onInputChange: handleCatSearch // onChange={(e) => updateformData(e, \"university\")}\n    ,\n    onSelect: e => setcategory({\n      name: e.target.value\n    }),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Search Categories\",\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, null, loading ? __jsx(CircularProgress, {\n          color: \"primary\",\n          size: 20\n        }) : null, params.InputProps.endAdornment)\n      })\n    }))\n  }), errs[\"category\"] && __jsx(Typography, {\n    color: \"error\"\n  }, \"Please select a category.\")))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(ContactPhoneIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"contact\",\n    label: \"Contact Number\",\n    value: contact,\n    type: \"number\",\n    onChange: e => updateformData(e, \"contact\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(LinkIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"bookLink\",\n    label: \"Book Event Link\",\n    value: bookLink,\n    type: \"text\",\n    onChange: e => updateformData(e, \"booklink\")\n  })))), __jsx(\"div\", {\n    className: classes.formInput\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(LinkIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"visitLink\",\n    label: \"Visit Website Link\",\n    value: visitLink,\n    type: \"text\",\n    onChange: e => updateformData(e, \"visitlink\")\n  })))), __jsx(\"div\", {\n    className: `${classes.formInput} ${classes.formInputFullWidth}`\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(SchoolIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(Autocomplete, {\n    required: true,\n    options: universities,\n    getOptionLabel: option => {\n      return option.name;\n    },\n    getOptionSelected: (option, value) => option.name === value.name,\n    loading: loadingUni,\n    value: university,\n    onInputChange: handleUniSearch // onChange={(e) => updateformData(e, \"university\")}\n    ,\n    onSelect: e => setuniversity({\n      name: e.target.value\n    }),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Search College\",\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, null, loadingUni ? __jsx(CircularProgress, {\n          color: \"primary\",\n          size: 20\n        }) : null, params.InputProps.endAdornment)\n      })\n    }))\n  }), errs[\"university\"] && __jsx(Typography, {\n    color: \"error\"\n  }, \"Please select a university.\")))), __jsx(\"div\", {\n    className: `${classes.formInput} ${classes.formInputFullWidth}`\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(DetailsIcon, null)), __jsx(Grid, {\n    item: true,\n    className: `${classes.formInputField} ${classes.formInputFieldFull}`\n  }, __jsx(\"textarea\", {\n    id: \"about\",\n    label: \"Description\",\n    value: description,\n    placeholder: \"Description\",\n    onChange: e => updateformData(e, \"description\")\n  })))), formtype == \"add\" ? __jsx(\"div\", {\n    className: `${classes.formInput} ${classes.formInputFullWidth}`\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(DetailsIcon, null)), __jsx(Grid, {\n    item: true,\n    className: `${classes.formInputField} ${classes.formInputFieldFull}`\n  }, __jsx(TextField, {\n    id: \"about\",\n    label: \"Promo Code\",\n    value: promo_code,\n    placeholder: \"Promo Code\",\n    onChange: e => updateformData(e, \"promo_code\")\n  })))) : \"\", __jsx(\"div\", {\n    className: `${classes.formInput} ${classes.formInputFullWidth} `\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, formtype == \"add\" ? \"Add\" : \"Edit\", \" Media\"), __jsx(\"div\", {\n    className: classes.Images\n  }, filesInfo.length > 0 && filesInfo.map((file, index) => __jsx(\"div\", {\n    key: index\n  }, file.type == \"image\" && __jsx(\"img\", {\n    src: file.data\n  }), file.type == \"video\" && __jsx(\"video\", {\n    src: file.data,\n    controls: true\n  }), __jsx(DeleteIcon, {\n    onClick: () => removeImage(index)\n  })) // <ProductMedia\n  //   file={file}\n  //   key={`img${index}`}\n  //   index={index}\n  //   removeFile={() => removeImage(index)}\n  // />\n  // <img src={file.data} key={`img${index}`} />\n  ), __jsx(Button, {\n    onClick: handleOpen.bind(this),\n    className: classes.AddBtn\n  }, __jsx(PhotoCameraOutlinedIcon, null), \"More+\")), __jsx(DropzoneDialog, {\n    open: open,\n    onSave: handleSave.bind(this),\n    acceptedFiles: [\"image/*\", \"video/*\"],\n    showPreviews: true,\n    maxFileSize: 50000000,\n    onClose: handleClose.bind(this),\n    className: \"dialogeCustom\"\n  })), __jsx(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    className: classes.Button\n  }, formtype == \"add\" ? \"Add\" : \"Edit\", \" Event\"), showPayButton()), formerrs.length > 0 && formerrs.map((msg, index) => __jsx(Typography, {\n    color: \"error\",\n    key: `error${index}`\n  }, msg)))))))));\n}","map":null,"metadata":{},"sourceType":"module"}