{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getImageLinkFromUID } from '../helpers/file';\nexport const STATUS_PENDING = 0;\nexport const STATUS_SENT = 1;\nexport const STATUS_DELIVERED = 2;\nexport const STATUS_READ = 3;\nexport const GROUP_CHAT_ALERT_TYPE = {\n  CREATE: \"create\"\n};\nconst defaultMessage = {\n  id: '',\n  body: '',\n  dialog_id: '',\n  date_sent: Math.floor(Date.now() / 1000),\n  attachments: null,\n  sender_id: null,\n  sender: null\n};\nexport class Message {\n  constructor(msg = defaultMessage, currentUser) {\n    this.id = msg.id || msg._id;\n    this.body = msg.body || msg.message;\n    this.group_chat_alert_type = msg.group_chat_alert_type || null;\n    this.dialog_id = msg.chat_dialog_id || msg.extension && msg.extension.dialog_id;\n    this.date_sent = msg.date_sent || msg.extension && msg.extension.date_sent || Math.floor(Date.now() / 1000);\n    this.send_state = Message.getSendState(msg, currentUser);\n    this.attachment = Message.getAttachment(msg);\n    this.sender_id = msg.sender_id || msg.extension && msg.extension.sender_id;\n    this.sender = msg.sender_id;\n  }\n\n  static getAttachment(msg) {\n    var _msg$extension;\n\n    if (msg.attachments && msg.attachments.length > 0) {\n      const attachments = _objectSpread({}, msg.attachments[0]);\n\n      const parseLink = getImageLinkFromUID(msg.attachments[0].uid);\n      attachments.url = parseLink;\n      return [attachments];\n    } else if (msg !== null && msg !== void 0 && (_msg$extension = msg.extension) !== null && _msg$extension !== void 0 && _msg$extension.attachments && msg.extension.attachments.length > 0) {\n      const attachments = _objectSpread({}, msg.extension.attachments[0]);\n\n      const parseLink = getImageLinkFromUID(msg.extension.attachments[0].uid);\n      attachments.url = parseLink;\n      return [attachments];\n    } else return null;\n  }\n\n  static getSendState(msg, currentUser) {\n    var _msg$read_ids, _msg$delivered_ids;\n\n    if (msg !== null && msg !== void 0 && (_msg$read_ids = msg.read_ids) !== null && _msg$read_ids !== void 0 && _msg$read_ids.find(_id => _id !== currentUser)) {\n      return STATUS_READ;\n    }\n\n    if (msg !== null && msg !== void 0 && (_msg$delivered_ids = msg.delivered_ids) !== null && _msg$delivered_ids !== void 0 && _msg$delivered_ids.find(msg => msg.delivered_ids !== currentUser)) {\n      return STATUS_DELIVERED;\n    }\n\n    return STATUS_PENDING;\n  }\n\n}\nexport class FakeMessage {\n  constructor(msg) {\n    this.attachment = msg.extension.attachments;\n    this.body = msg.body;\n    this.date_sent = msg.extension.date_sent;\n    this.dialog_id = msg.extension.dialog_id;\n    this.id = msg.id;\n    this.send_state = 0;\n    this.sender = undefined;\n    this.sender_id = msg.extension.sender_id;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}