{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Layout from \"../Layout\";\nimport { Box, Card, CardContent, TextField, Button, Container, Grid, Typography } from \"@material-ui/core\";\nimport { DropzoneDialog } from \"material-ui-dropzone\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport SubtitlesIcon from \"@material-ui/icons/Subtitles\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { ForgotPasswordAPI, UpdatePasswordAPI } from \"../apis/global-api\";\nimport PhotoCameraOutlinedIcon from \"@material-ui/icons/PhotoCameraOutlined\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticated } from \"../redux/actions/auth\";\nimport { useRouter } from \"next/router\";\nimport { fileToBase64 } from \"../Utils/helpers\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    section: {\n      padding: \"5rem 0\",\n      position: \"relative\",\n      overflow: \"hidden\"\n    },\n    form: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    pdTitle: {\n      marginBottom: \"2rem\"\n    },\n    card: {\n      boxShadow: \"none\",\n      border: \"#ccc solid 1px\",\n      height: \"100%\",\n      background: \"rgba(255, 255, 255, 0.6)\",\n      \"&::before\": {\n        content: '\"\"',\n        background: \"url(/static/images/circleCenter.svg)\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n        top: \"55%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        height: \"540px\",\n        width: \"540px\",\n        position: \"absolute\",\n        zIndex: \"-1\"\n      },\n      \"&::after\": {\n        content: '\"\"',\n        background: \"url(/static/images/circleCenter.svg)\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n        bottom: \"-15rem\",\n        left: \"-25rem\",\n        height: \"50rem\",\n        width: \"50rem\",\n        position: \"absolute\",\n        zIndex: \"-1\"\n      }\n    },\n    cardBody: {\n      padding: \"2rem !important\"\n    },\n    formInput: _defineProperty({\n      marginBottom: \"2rem\",\n      width: \"50%\"\n    }, theme.breakpoints.down(\"sm\"), {\n      width: \"100%\"\n    }),\n    formInputFullWidth: {\n      width: \"100%\"\n    },\n    formInputField: {\n      width: \"80%\",\n      \"& .MuiTextField-root\": {\n        width: \"100%\"\n      }\n    },\n    formInputFieldFull: _defineProperty({}, theme.breakpoints.up(\"sm\"), {\n      width: \"90%\",\n      \"& .MuiTextField-root\": {\n        width: \"100%\"\n      },\n      '& textarea': {\n        width: '100%',\n        border: 'none',\n        borderBottom: 'solid 1px #ccc',\n        height: '50px'\n      },\n      '& textarea:focus': {\n        outline: 'none',\n        borderBottom: 'solid 1px var(--theme)'\n      }\n    }),\n    formControl: {\n      width: \"100%\"\n    },\n    Button: {\n      width: \"80%\",\n      height: \"50px\",\n      marginTop: \"1rem\",\n      backgroundColor: \"var(--theme)\",\n      color: \"#fff\",\n      fontSize: \"1rem\",\n      boxShadow: \"none\",\n      maxWidth: \"200px\"\n    },\n    Images: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      \"& img\": {\n        width: \"125px\",\n        height: \"125px\",\n        objectFit: \"contain\",\n        marginRight: \"10px\",\n        marginBottom: \"10px\",\n        border: \"solid 1px #333 \"\n      },\n      \"& video\": {\n        width: \"125px\",\n        height: \"125px\",\n        objectFit: \"contain\",\n        marginRight: \"10px\",\n        marginBottom: \"10px\",\n        border: \"solid 1px #333 \"\n      }\n    },\n    AddBtn: {\n      border: \"solid 1px #333\",\n      width: \"125px\",\n      height: \"125px\",\n      display: \"grid\"\n    },\n    dialogeCustom: {\n      \"& .MuiGrid-spacing-xs-8\": {\n        width: \"100%\",\n        margin: \"0\"\n      }\n    }\n  };\n});\nexport default function ForgotPassword(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var classes = useStyles();\n\n  var _useState = useState(''),\n      email = _useState[0],\n      setemail = _useState[1];\n\n  var _useState2 = useState(''),\n      successMsg = _useState2[0],\n      setsuccessMsg = _useState2[1];\n\n  var _useState3 = useState('forgot'),\n      page = _useState3[0],\n      setpage = _useState3[1];\n\n  var _useState4 = useState(''),\n      code = _useState4[0],\n      setcode = _useState4[1];\n\n  var _useState5 = useState(''),\n      password = _useState5[0],\n      setpassword = _useState5[1];\n\n  var _useState6 = useState(''),\n      confirmpassword = _useState6[0],\n      setconfirmpassword = _useState6[1];\n\n  var _useState7 = useState({}),\n      errs = _useState7[0],\n      seterrs = _useState7[1];\n\n  var _useState8 = useState(false),\n      loading = _useState8[0],\n      setloading = _useState8[1];\n\n  var _useState9 = useState(false),\n      loadingUni = _useState9[0],\n      setloadingUni = _useState9[1];\n\n  var _useState10 = useState(false),\n      backdrop = _useState10[0],\n      setbackdrop = _useState10[1];\n\n  var _useState11 = useState([]),\n      formerrs = _useState11[0],\n      setformerrs = _useState11[1];\n\n  var dispatch = useDispatch();\n  var router = useRouter();\n\n  var checkValidation = function checkValidation() {\n    setformerrs(\"\");\n\n    if (!email) {\n      setformerrs([\"Email is required\"]);\n      return false;\n    }\n\n    return true;\n  };\n\n  var handleSubmit = function handleSubmit(e, uploaded_files) {\n    e && e.preventDefault();\n    var is_valid = checkValidation();\n\n    if (!is_valid) {\n      return;\n    }\n\n    setbackdrop(true);\n    var data = {\n      email: email\n    };\n    ForgotPasswordAPI(data).then(function (response) {\n      if (response && response.error) {\n        setbackdrop(false);\n        setformerrs(response.msg);\n      } else {\n        setbackdrop(false);\n        setsuccessMsg('You may have got the 6 digit code in your email for reset the password.');\n        setpage('reset');\n      }\n    });\n  };\n\n  var handleSubmitReset = function handleSubmitReset(e, uploaded_files) {\n    e && e.preventDefault();\n    var is_valid = checkValidation();\n\n    if (!is_valid) {\n      return;\n    }\n\n    if (password.length < 6) {\n      setformerrs([\"Password must be 6 characters long\"]);\n      return;\n    }\n\n    if (password != confirmpassword) {\n      setformerrs([\"Password and confirm password should be same\"]);\n      return;\n    }\n\n    setbackdrop(true);\n    var data = {\n      email: email,\n      code: code,\n      password: password,\n      confirmpassword: confirmpassword\n    };\n    UpdatePasswordAPI(data).then(function (response) {\n      if (response && response.error) {\n        setbackdrop(false);\n        setformerrs(response.msg);\n        setpage('reset');\n      } else {\n        setsuccessMsg('Password reset successfully. Redirecting....');\n        window.location.replace(\"/?signup=open\");\n      }\n    });\n  };\n\n  var updateformData = function updateformData(e, type) {\n    e.preventDefault();\n    eval(\"set\" + type + \"('\" + e.target.value + \"')\");\n  };\n\n  return __jsx(Layout, null, __jsx(\"section\", {\n    className: classes.section\n  }, backdrop && __jsx(Backdrop, {\n    className: classes.backdrop,\n    open: backdrop // onClick={handleClose}\n\n  }, __jsx(CircularProgress, {\n    color: \"inherit\"\n  })), __jsx(Container, {\n    maxWidth: \"xl\"\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    lg: 9,\n    md: 9,\n    sm: 8,\n    xs: 12,\n    style: {\n      margin: \"auto\"\n    }\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, \"Forgot Password\"), __jsx(\"span\", {\n    className: \"success-msg\",\n    style: {\n      color: \"green\",\n      fontSize: \"16px\",\n      textAlign: \"center\"\n    }\n  }, successMsg), page == 'forgot' && __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"\".concat(classes.formInput, \" \").concat(classes.formInputFullWidth)\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(SubtitlesIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"email\",\n    label: \"Email\",\n    value: email,\n    onChange: function onChange(e) {\n      return updateformData(e, \"email\");\n    }\n  })))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    className: classes.Button\n  }, \"Submit\")), page == 'reset' && __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleSubmitReset\n  }, __jsx(\"div\", {\n    className: \"\".concat(classes.formInput, \" \").concat(classes.formInputFullWidth)\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(SubtitlesIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"code\",\n    label: \"Code\",\n    value: code,\n    onChange: function onChange(e) {\n      return updateformData(e, \"code\");\n    }\n  })))), __jsx(\"div\", {\n    className: \"\".concat(classes.formInput, \" \").concat(classes.formInputFullWidth)\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(SubtitlesIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"password\",\n    label: \"Password\",\n    value: password,\n    type: \"password\",\n    onChange: function onChange(e) {\n      return updateformData(e, \"password\");\n    }\n  })))), __jsx(\"div\", {\n    className: \"\".concat(classes.formInput, \" \").concat(classes.formInputFullWidth)\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(SubtitlesIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"confirmpassword\",\n    label: \"Confirm Password\",\n    value: confirmpassword,\n    type: \"password\",\n    onChange: function onChange(e) {\n      return updateformData(e, \"confirmpassword\");\n    }\n  })))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    className: classes.Button\n  }, \"Submit\")), formerrs.length > 0 && formerrs.map(function (msg, index) {\n    return __jsx(Typography, {\n      color: \"error\",\n      key: \"error\".concat(index)\n    }, msg);\n  }))))))));\n}","map":null,"metadata":{},"sourceType":"module"}