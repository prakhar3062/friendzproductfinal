{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ConnectyCube from 'connectycube';\nimport appConfig from '../../../appConfig';\nimport User from '../models/user';\nimport store from '../../redux/store'; // import { setCurrentUser } from '../actions/currentUser'\n\nimport { getImageLinkFromUID } from '../helpers/file';\nimport { chatAuthenticated } from '../../redux/actions/chatUser';\nimport { chatConnection } from '../../redux/actions/chatConnected';\nimport { chatUnreadCount } from '../../redux/actions/chatUnread';\nimport { pushMessage } from '../../redux/actions/messages'; // import { LogOut } from '../reducers/index'\n\nclass AuthService {\n  async init() {\n    const res = await ConnectyCube.init(...appConfig.connectyCubeConfig);\n    return res; // await ConnectyCube.createSession({\n    //     email:'test@test.com',\n    //     password:'test'\n    // })\n    // return this.autologin()\n  } // async autologin() {\n  //     const checkUserSessionFromStore = await this.getUserSession()\n  //     if (checkUserSessionFromStore) {\n  //         const data = JSON.parse(checkUserSessionFromStore)\n  //         await this.signIn({ login: data.login, password: data.password })\n  //         return 'home'\n  //     } else { return 'auth' }\n  // }\n\n\n  async login(params) {\n    const session = await ConnectyCube.createSession(params);\n    const currentUser = new User(session.user);\n    session.user.avatar = getImageLinkFromUID(session.user.avatar); // work around\n\n    session.user.full_name = session.user.login;\n    store.dispatch(chatAuthenticated(session));\n    const customSession = Object.assign({}, currentUser, {\n      password: params.password\n    });\n    this.setUserSession(customSession);\n    this.connect(customSession.id, customSession.password);\n  } // async signUp(params) {\n  //     await ConnectyCube.createSession()\n  //     await ConnectyCube.users.signup(params)\n  //     return this.signIn(params)\n  // }\n\n\n  async connect(userId, password) {\n    const isConnected = ConnectyCube.chat.isConnected;\n\n    if (isConnected) {\n      store.dispatch(chatConnection());\n      this.getUnread();\n    } else {\n      await ConnectyCube.chat.connect({\n        userId,\n        password\n      }).then((error, contactlist) => {\n        this.setUpListeners();\n        store.dispatch(chatConnection());\n        this.getUnread();\n      });\n    }\n  }\n\n  async getUnread() {\n    await ConnectyCube.chat.message.unreadCount().then(result => {\n      store.dispatch(chatUnreadCount(result.total));\n      console.log('unread', reasult);\n    }).catch(error => {});\n  }\n\n  async setUpListeners() {\n    ConnectyCube.chat.onMessageListener = this.onMessage.bind(this);\n  }\n\n  onMessage(userId, message) {\n    let user = localStorage.getItem(\"user\");\n    user = user ? JSON.parse(user) : \"\";\n    console.log(message, userId, user.connectycube_user.connectycube_id);\n\n    if (!user || !user.connectycube_user || userId == user.connectycube_user.connectycube_id) {\n      return;\n    }\n\n    message.message = message.body;\n    message.device_token = user.device_token;\n    message.notif = true;\n    store.dispatch(pushMessage(message));\n  }\n\n  setUserSession(userSession) {\n    return localStorage.setItem(AuthService.CURRENT_USER_SESSION_KEY, JSON.stringify(userSession));\n  }\n\n  getUserSession() {\n    return localStorage.getItem(AuthService.CURRENT_USER_SESSION_KEY);\n  } // async logout() {\n  //     localStorage.clear()\n  //     await ConnectyCube.logout()\n  //     store.dispatch(LogOut())\n  // }\n\n\n}\n\n_defineProperty(AuthService, \"CURRENT_USER_SESSION_KEY\", \"CURRENT_USER_SESSION_KEY\");\n\n_defineProperty(AuthService, \"DEVICE_TOKEN_KEY\", \"DEVICE_TOKEN_KEY\");\n\nconst authService = new AuthService();\nObject.freeze(authService);\nexport default authService;","map":null,"metadata":{},"sourceType":"module"}