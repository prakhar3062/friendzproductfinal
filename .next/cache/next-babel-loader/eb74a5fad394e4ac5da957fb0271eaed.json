{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PUSH_MESSAGE, SET_MESSAGES, DELETE_ALL_MESSAGES, LAZY_FETCH_MESSAGES, UPDATE_MESSAGES } from \"../actionTypes/messages\";\nimport { SELECTED_DIALOG } from \"../actionTypes/selectedDialog\";\nimport ConnectyCube from \"connectycube\";\nimport { lazyFetchMessages, updateStatusMessages } from \"./reducer-function\";\nlet initial_state = {\n  dialog: {},\n  messages: []\n};\nexport default ((messages = initial_state, action) => {\n  switch (action.type) {\n    case SET_MESSAGES:\n      {\n        const msgs = action.msgs;\n        const dialog = action.dialog;\n        return {\n          dialog: dialog,\n          messages: msgs\n        };\n      }\n    // case SELECTED_DIALOG: {\n    //   console.log(action)\n    //   const dialog = action.dialog;\n    //   return { ...messages, dialog: dialog };\n    // }\n\n    case PUSH_MESSAGE:\n      {\n        let msg = action.msg;\n\n        if (msg && msg.dialog_id == messages.dialog.connecty_dialog_id) {\n          if (msg.notif) {\n            const params = {\n              read: 1,\n              chat_dialog_id: msg.dialog_id\n            };\n            ConnectyCube.chat.message.update(\"\", params).then(result => {}).catch(error => {});\n          }\n\n          const msgs = messages.messages.concat(action.msg);\n          return _objectSpread(_objectSpread({}, messages), {}, {\n            messages: msgs\n          });\n        } else {\n          let userData = localStorage.getItem(\"user\");\n          userData = userData ? JSON.parse(userData) : \"\";\n\n          if (userData) {\n            var message = {\n              app_id: process.env.ONESIGNAL_APP_ID,\n              contents: {\n                \"en\": \"You recieved a new message.\"\n              },\n              filters: [{\n                \"field\": \"tag\",\n                \"key\": \"user\",\n                \"relation\": \"=\",\n                \"value\": userData.id\n              }]\n            };\n            fetch(\"https://onesignal.com/api/v1/notifications\", {\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\",\n                Authorization: \"Basic \" + process.env.ONESIGNAL_REST_KEY\n              },\n              method: \"post\",\n              body: JSON.stringify(message) // body: JSON.stringify(data),\n\n            }).then(response => {\n              if (response.ok) {\n                return response.json();\n              } else {\n                throw Error(`Request rejected with status ${response.status}`);\n              }\n            }).then(responseData => {\n              console.log(\"responseDatasadsad\", responseData);\n              return responseData;\n            }).catch(error => console.log(\"responseDatasadsad\", error));\n          }\n        }\n\n        return messages;\n      }\n\n    case DELETE_ALL_MESSAGES:\n      {\n        return initial_state;\n      }\n\n    default:\n      return initial_state;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}