{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject;\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, Card, CardContent, Typography } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { commonStyles, desktopStyles, mobileStyles, TabStyles } from './styles';\nimport styled from \"styled-components\";\nimport { searchUniversities } from \"../../apis/global-api\";\nimport logo from './../../public/static/images/logo.png';\nimport { useRouter } from \"next/router\";\nvar StyledDialog = styled(Dialog)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  .MuiBackdrop-root {\\n    background-color: rgba(0, 0, 0, 0.7);\\n  }\\n\"])));\nvar useStyles = makeStyles(function (theme) {\n  var _objectSpread2;\n\n  return _objectSpread(_objectSpread({}, commonStyles), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, theme.breakpoints.up('sm'), desktopStyles), _defineProperty(_objectSpread2, theme.breakpoints.between('xs', 'sm'), TabStyles), _defineProperty(_objectSpread2, theme.breakpoints.down('xs'), mobileStyles), _objectSpread2));\n});\n\nvar Modal = function Modal(_ref) {\n  var openStatus = _ref.openStatus;\n  useEffect(function () {\n    console.log('openStatus', openStatus);\n    setopen(openStatus);\n  }, [openStatus]);\n\n  var _useState = useState(openStatus),\n      open = _useState[0],\n      setopen = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setloading = _useState2[1];\n\n  var _useState3 = useState([{\n    name: \"\",\n    id: \"\"\n  }]),\n      universities = _useState3[0],\n      setuniversities = _useState3[1];\n\n  var _useState4 = useState({\n    name: \"\",\n    id: \"\"\n  }),\n      university = _useState4[0],\n      setuniversity = _useState4[1];\n\n  var openModal = function openModal() {\n    setopen(true);\n  };\n\n  var closeModal = function closeModal() {\n    setopen(false);\n  };\n\n  var router = useRouter();\n  var top100Films = [{\n    title: 'The Shawshank Redemption',\n    year: 1994\n  }, {\n    title: 'The Godfather',\n    year: 1972\n  }, {\n    title: 'The Godfather: Part II',\n    year: 1974\n  }, {\n    title: 'The Dark Knight',\n    year: 2008\n  }, {\n    title: '12 Angry Men',\n    year: 1957\n  }, {\n    title: \"Schindler's List\",\n    year: 1993\n  }, {\n    title: 'Pulp Fiction',\n    year: 1994\n  }, {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003\n  }, {\n    title: 'The Good, the Bad and the Ugly',\n    year: 1966\n  }];\n  var defaultProps = {\n    options: top100Films,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.title;\n    }\n  };\n  var flatProps = {\n    options: top100Films.map(function (option) {\n      return option.title;\n    })\n  };\n\n  var handleUniSearch = function handleUniSearch(e) {\n    var value = e.target.value;\n    if (!value) return;\n    setloading(true);\n    searchUniversities(value).then(function (response) {\n      setloading(false);\n      setuniversities(response);\n    });\n  };\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var handleFormSubmit = function handleFormSubmit() {\n    // let uni = universities.find(\n    //   (item) => item.name == university.name\n    // );\n    closeModal();\n    router.push(\"/products?m_uni=\" + university.name); // console.log(uni)\n  };\n\n  var classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(StyledDialog, {\n    open: open,\n    onClose: closeModal,\n    \"aria-labelledby\": \"form-dialog-title\",\n    className: classes.modal\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(CloseIcon, {\n    onClick: closeModal,\n    className: classes.closeIcon\n  }), __jsx(\"img\", {\n    src: logo,\n    alt: \"\",\n    className: classes.image\n  }), __jsx(Typography, {\n    variant: \"h5\",\n    className: classes.title\n  }, \"Fill Important Details\"), __jsx(Typography, null, \"To make Your Search Easy Kindly Please Select Your College Name or Location\"), __jsx(\"form\", {\n    className: classes.container\n  }, __jsx(Autocomplete, {\n    className: classes.Autocomplete,\n    required: true,\n    options: universities,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    getOptionSelected: function getOptionSelected(option, value) {\n      return option.name === value.name;\n    },\n    loading: loading // value={university}\n    ,\n    onInputChange: function onInputChange(e) {\n      return e && handleUniSearch(e);\n    } // onChange={(e) => updateformData(e, \"university\")}\n    ,\n    onSelect: function onSelect(e) {\n      return e.target.value && setuniversity({\n        name: e.target.value\n      });\n    },\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        label: \"Type Your College Name\",\n        margin: \"normal\"\n      }));\n    }\n  }), __jsx(Button, {\n    variant: \"contained\",\n    className: classes.Button,\n    onClick: handleFormSubmit\n  }, \"Done\"))))));\n};\n\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}