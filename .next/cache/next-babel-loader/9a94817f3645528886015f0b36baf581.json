{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, Card, CardContent, Typography } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { commonStyles, desktopStyles, mobileStyles, TabStyles } from './styles';\nimport styled from \"styled-components\";\nimport { searchUniversities } from \"../../apis/global-api\";\nimport { useRouter } from \"next/router\";\nconst StyledDialog = styled(Dialog)`\n  .MuiBackdrop-root {\n    background-color: rgba(0, 0, 0, 0.7);\n  }\n`;\nconst useStyles = makeStyles(theme => _objectSpread(_objectSpread({}, commonStyles), {}, {\n  [theme.breakpoints.up('sm')]: desktopStyles,\n  [theme.breakpoints.between('xs', 'sm')]: TabStyles,\n  [theme.breakpoints.down('xs')]: mobileStyles\n}));\n\nconst Modal = ({\n  openStatus\n}) => {\n  useEffect(() => {\n    console.log('openStatus', openStatus);\n    setopen(openStatus);\n  }, [openStatus]);\n  const {\n    0: open,\n    1: setopen\n  } = useState(openStatus);\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: universities,\n    1: setuniversities\n  } = useState([{\n    name: \"\",\n    id: \"\"\n  }]);\n  const {\n    0: university,\n    1: setuniversity\n  } = useState({\n    name: \"\",\n    id: \"\"\n  });\n\n  const openModal = () => {\n    setopen(true);\n  };\n\n  const closeModal = () => {\n    setopen(false);\n  };\n\n  const router = useRouter();\n  const top100Films = [{\n    title: 'The Shawshank Redemption',\n    year: 1994\n  }, {\n    title: 'The Godfather',\n    year: 1972\n  }, {\n    title: 'The Godfather: Part II',\n    year: 1974\n  }, {\n    title: 'The Dark Knight',\n    year: 2008\n  }, {\n    title: '12 Angry Men',\n    year: 1957\n  }, {\n    title: \"Schindler's List\",\n    year: 1993\n  }, {\n    title: 'Pulp Fiction',\n    year: 1994\n  }, {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003\n  }, {\n    title: 'The Good, the Bad and the Ugly',\n    year: 1966\n  }];\n  const defaultProps = {\n    options: top100Films,\n    getOptionLabel: option => option.title\n  };\n  const flatProps = {\n    options: top100Films.map(option => option.title)\n  };\n\n  const handleUniSearch = e => {\n    let value = e.target.value;\n    if (!value) return;\n    setloading(true);\n    searchUniversities(value).then(response => {\n      setloading(false);\n      setuniversities(response);\n    });\n  };\n\n  const [value, setValue] = React.useState(null);\n\n  const handleFormSubmit = () => {\n    // let uni = universities.find(\n    //   (item) => item.name == university.name\n    // );\n    closeModal();\n    router.push(\"/products?m_uni=\" + university.name); // console.log(uni)\n  };\n\n  const classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(StyledDialog, {\n    open: open,\n    onClose: closeModal,\n    \"aria-labelledby\": \"form-dialog-title\",\n    className: classes.modal\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(CloseIcon, {\n    onClick: closeModal,\n    className: classes.closeIcon\n  }), __jsx(\"img\", {\n    src: \"/static/images/logo.png\",\n    alt: \"\",\n    className: classes.image\n  }), __jsx(Typography, {\n    variant: \"h5\",\n    className: classes.title\n  }, \"Fill Important Details\"), __jsx(Typography, null, \"To make Your Search Easy Kindly Please Select Your College Name or Location\"), __jsx(\"form\", {\n    className: classes.container\n  }, __jsx(Autocomplete, {\n    className: classes.Autocomplete,\n    required: true,\n    options: universities,\n    getOptionLabel: option => {\n      return option.name;\n    },\n    getOptionSelected: (option, value) => option.name === value.name,\n    loading: loading // value={university}\n    ,\n    onInputChange: e => e && handleUniSearch(e) // onChange={(e) => updateformData(e, \"university\")}\n    ,\n    onSelect: e => e.target.value && setuniversity({\n      name: e.target.value\n    }),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Type Your College Name\",\n      margin: \"normal\"\n    }))\n  }), __jsx(Button, {\n    variant: \"contained\",\n    className: classes.Button,\n    onClick: handleFormSubmit\n  }, \"Done\"))))));\n};\n\nexport default Modal;","map":{"version":3,"sources":["E:/jay/frontend/src/components/Modal/index.js"],"names":["React","useState","useEffect","Autocomplete","Dialog","TextField","Button","Card","CardContent","Typography","CloseIcon","makeStyles","useTheme","commonStyles","desktopStyles","mobileStyles","TabStyles","styled","searchUniversities","useRouter","StyledDialog","useStyles","theme","breakpoints","up","between","down","Modal","openStatus","console","log","setopen","open","loading","setloading","universities","setuniversities","name","id","university","setuniversity","openModal","closeModal","router","top100Films","title","year","defaultProps","options","getOptionLabel","option","flatProps","map","handleUniSearch","e","value","target","then","response","setValue","handleFormSubmit","push","classes","modal","card","cardBody","closeIcon","image","container","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, Card, CardContent, Typography } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { commonStyles, desktopStyles, mobileStyles, TabStyles } from './styles'\nimport styled from \"styled-components\";\nimport { searchUniversities } from \"../../apis/global-api\";\n\nimport { useRouter } from \"next/router\";\n\nconst StyledDialog = styled(Dialog)`\n  .MuiBackdrop-root {\n    background-color: rgba(0, 0, 0, 0.7);\n  }\n`;\n\n\nconst useStyles = makeStyles(theme => ({\n  ...commonStyles,\n  [theme.breakpoints.up('sm')]: desktopStyles,\n  [theme.breakpoints.between('xs', 'sm')]: TabStyles,\n  [theme.breakpoints.down('xs')]: mobileStyles\n}))\n\nconst Modal = ({ openStatus }) => {\n\n  useEffect(() => {\n    console.log('openStatus', openStatus)\n    setopen(openStatus)\n\n  }, [openStatus])\n\n  const [open, setopen] = useState(openStatus);\n  const [loading, setloading] = useState(false);\n  const [universities, setuniversities] = useState([\n    {\n      name: \"\",\n      id: \"\",\n    },\n  ]);\n\n  const [university, setuniversity] = useState({\n    name: \"\",\n    id: \"\",\n  });\n  const openModal = () => {\n    setopen(true);\n  };\n\n  const closeModal = () => {\n    setopen(false);\n  };\n  const router = useRouter();\n\n  const top100Films = [\n    { title: 'The Shawshank Redemption', year: 1994 },\n    { title: 'The Godfather', year: 1972 },\n    { title: 'The Godfather: Part II', year: 1974 },\n    { title: 'The Dark Knight', year: 2008 },\n    { title: '12 Angry Men', year: 1957 },\n    { title: \"Schindler's List\", year: 1993 },\n    { title: 'Pulp Fiction', year: 1994 },\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n    { title: 'The Good, the Bad and the Ugly', year: 1966 }\n  ]\n\n  const defaultProps = {\n    options: top100Films,\n    getOptionLabel: (option) => option.title,\n  };\n\n  const flatProps = {\n    options: top100Films.map((option) => option.title),\n  };\n\n  const handleUniSearch = (e) => {\n    let value = e.target.value;\n    if (!value) return;\n    setloading(true);\n    searchUniversities(value).then((response) => {\n      setloading(false);\n      setuniversities(response);\n    });\n  };\n\n  const [value, setValue] = React.useState(null);\n\n  const handleFormSubmit=()=>{\n    // let uni = universities.find(\n    //   (item) => item.name == university.name\n    // );\n    closeModal()\n    router.push(\"/products?m_uni=\" + university.name);\n    // console.log(uni)\n  }\n\n  const classes = useStyles()\n\n  return (\n    <>\n      {/* <button onClick={openModal} style={{ margin: '1rem auto' }}>Open Modal</button> */}\n      <StyledDialog\n        open={open}\n        onClose={closeModal}\n        aria-labelledby=\"form-dialog-title\"\n        className={classes.modal}\n      >\n        <Card className={classes.card}>\n          <CardContent className={classes.cardBody}>\n            <CloseIcon onClick={closeModal} className={classes.closeIcon} />\n            <img src=\"/static/images/logo.png\" alt=\"\" className={classes.image} />\n            <Typography variant=\"h5\" className={classes.title}>Fill Important Details</Typography>\n            <Typography >To make Your Search Easy Kindly Please Select Your College Name or Location</Typography>\n            <form className={classes.container}>\n              {/* <Autocomplete\n                {...defaultProps}\n                id=\"debug\"\n                className={classes.Autocomplete}\n                debug\n                renderInput={(params) => <TextField {...params} label=\"Type Your College Name\" margin=\"normal\" />}\n              /> */}\n\n              <Autocomplete\n                className={classes.Autocomplete}\n                required\n                options={universities}\n                getOptionLabel={(option) => {\n                  return option.name;\n                }}\n                getOptionSelected={(option, value) =>\n                  option.name === value.name\n                }\n                loading={loading}\n                // value={university}\n                onInputChange={(e) => e && handleUniSearch(e)}\n                // onChange={(e) => updateformData(e, \"university\")}\n                onSelect={(e) =>\n                  e.target.value && setuniversity({ name: e.target.value })\n                }\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Type Your College Name\" margin=\"normal\" />\n                )}\n              />\n\n              <Button variant=\"contained\" className={classes.Button} onClick={handleFormSubmit}>\n                Done\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </StyledDialog>\n    </>\n  );\n}\n\nexport default Modal\n"]},"metadata":{},"sourceType":"module"}