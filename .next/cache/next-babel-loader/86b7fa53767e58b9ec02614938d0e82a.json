{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Button, Container, Grid, Card, CardContent, Typography } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PhoneIphoneIcon from \"@material-ui/icons/PhoneIphone\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport AttachmentOutlinedIcon from \"@material-ui/icons/AttachmentOutlined\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport { commonStyles, desktopStyles, mobileStyles, TabStyles } from \"./styles\";\nimport Link from \"next/link\";\nimport PageLoader from \"../PageLoader\";\nimport { ResetPasswordAPI } from \"../../apis/auth-api\";\nvar useStyles = makeStyles(function (theme) {\n  var _objectSpread2;\n\n  return _objectSpread(_objectSpread({}, commonStyles), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, theme.breakpoints.up(\"sm\"), desktopStyles), _defineProperty(_objectSpread2, theme.breakpoints.between(\"xs\", \"sm\"), TabStyles), _defineProperty(_objectSpread2, theme.breakpoints.down(\"xs\"), mobileStyles), _objectSpread2));\n});\nimport { useDispatch } from \"react-redux\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { authenticated } from \"../../redux/actions/auth\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport ImageCropper from \"../ImageCropper\";\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nvar ResetPassword = function ResetPassword(_ref) {\n  var user = _ref.user;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setloading = _useState[1];\n\n  var _useState2 = useState(false),\n      searchloading = _useState2[0],\n      setsearchloading = _useState2[1];\n\n  var _useState3 = useState([]),\n      error = _useState3[0],\n      seterror = _useState3[1];\n\n  var _useState4 = useState(''),\n      password = _useState4[0],\n      setpassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      oldpassword = _useState5[0],\n      setoldpassword = _useState5[1];\n\n  var _useState6 = useState(''),\n      confirmpassword = _useState6[0],\n      setconfirmpassword = _useState6[1];\n\n  var _useState7 = useState(false),\n      snackbar = _useState7[0],\n      setsnackbar = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      snackbarMsg = _useState8[0],\n      setsnackbarMsg = _useState8[1];\n\n  var _useState9 = useState(\"success\"),\n      snackbarType = _useState9[0],\n      setsnackbarType = _useState9[1];\n\n  var dispatch = useDispatch();\n  var classes = useStyles();\n\n  var updatePassword = function updatePassword() {\n    var is_valid = checkValidation();\n\n    if (!is_valid) {\n      return;\n    }\n\n    var data = {\n      password: password,\n      confirmpassword: confirmpassword,\n      oldpassword: oldpassword,\n      user_id: user.id\n    };\n    setloading(true);\n    ResetPasswordAPI(data, user.id).then(function (data) {\n      setloading(false);\n\n      if (data && data.error) {\n        seterror(data.msg);\n      } else {\n        setsnackbar(true);\n        setsnackbarMsg(\"Password updated successfully.\");\n        setsnackbarType(\"success\");\n        setpassword('');\n        setoldpassword('');\n        setconfirmpassword('');\n      }\n    });\n  };\n\n  var checkValidation = function checkValidation() {\n    seterror(\"\");\n\n    if (!password || !oldpassword || !confirmpassword) {\n      seterror([\"All fields are required\"]);\n      return false;\n    }\n\n    if (password.length < 6) {\n      seterror([\"Password must be 6 chracters long\"]);\n      return false;\n    }\n\n    ;\n\n    if (password != confirmpassword) {\n      seterror([\"Confirm password not matched\"]);\n      return false;\n    }\n\n    ;\n    return true;\n  };\n\n  var updateformData = function updateformData(e, type) {\n    e.preventDefault();\n    eval(\"set\" + type + \"('\" + e.target.value + \"')\");\n  };\n\n  var handlesnackbar = function handlesnackbar() {\n    setsnackbar(!snackbar);\n  };\n\n  return __jsx(\"section\", {\n    className: classes.section\n  }, __jsx(Container, {\n    maxWidth: \"xl\"\n  }, __jsx(PageLoader, {\n    loading: loading\n  }), __jsx(Snackbar, {\n    open: snackbar,\n    autoHideDuration: 6000,\n    onClose: handlesnackbar\n  }, __jsx(Alert, {\n    onClose: handlesnackbar,\n    severity: snackbarType\n  }, snackbarMsg)), __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    lg: 12,\n    md: 12,\n    sm: 12,\n    xs: 12\n  }, __jsx(Typography, {\n    className: classes.editTitle,\n    variant: \"h3\"\n  }, \"Reset Password\")), __jsx(Grid, {\n    item: true,\n    lg: 9,\n    md: 9,\n    sm: 8,\n    xs: 12\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.cardBody\n  }, __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    autoComplete: \"off\"\n  }, __jsx(\"div\", {\n    className: \"\".concat(classes.formInput, \" \").concat(classes.formInputFullWidth)\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PersonIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"fname\",\n    label: \"Old Password\",\n    value: oldpassword,\n    type: \"password\",\n    onChange: function onChange(e) {\n      return updateformData(e, \"oldpassword\");\n    }\n  })))), __jsx(\"div\", {\n    className: \"\".concat(classes.formInput, \" \").concat(classes.formInputFullWidth)\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PersonIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"fname\",\n    label: \"New Password\",\n    value: password,\n    type: \"password\",\n    onChange: function onChange(e) {\n      return updateformData(e, \"password\");\n    }\n  })))), __jsx(\"div\", {\n    className: \"\".concat(classes.formInput, \" \").concat(classes.formInputFullWidth)\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(PersonIcon, null)), __jsx(Grid, {\n    item: true,\n    className: classes.formInputField\n  }, __jsx(TextField, {\n    id: \"fname\",\n    label: \"ConfirmPassword\",\n    value: confirmpassword,\n    type: \"password\",\n    onChange: function onChange(e) {\n      return updateformData(e, \"confirmpassword\");\n    }\n  })))), __jsx(Button, {\n    variant: \"contained\",\n    className: classes.Button,\n    onClick: updatePassword\n  }, \"Update\")), __jsx(\"div\", null, error.length > 0 && error.map(function (text, index) {\n    return __jsx(Typography, {\n      color: \"error\",\n      key: \"err-\".concat(index)\n    }, text);\n  }))))))));\n};\n\nexport default ResetPassword;","map":null,"metadata":{},"sourceType":"module"}